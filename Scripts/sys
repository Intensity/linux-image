#!/bin/bash

umask 077
ulimit -d unlimited
ulimit -v unlimited
export LANG=C
hash -r
#set -x
unset SSH_CLIENT
unset SSH_CONNECTION

declare -A CMD_HIERARCHY=(
  ["sys"]="storage network"
  ["sys_storage"]="zfs"
  ["sys_storage_zfs"]="pool"
  ["sys_storage_zfs_pool"]="create destroy"
  ["sys_network"]="configure status"
)

function sys() {
  local cmd args
  local longest_prefix="sys"
  local current_prefix="sys"

  for cmd in "${@}"; do
    local func="${current_prefix}_${cmd}"
    if declare -f "${func}" >/dev/null; then
      current_prefix="${func}"
      longest_prefix="${func}"
      args=("${cmd}" "${args[@]}")
    else
      break
    fi
  done

  if echo "${@:${#args[@]}+1}" | sed 's,.* ,,'|grep -q help
  then
    if test "${longest_prefix}" '==' sys
    then
      true
    else
      "${longest_prefix}" "${@:${#args[@]}+1}"
    fi

    local subcommands="${CMD_HIERARCHY[${longest_prefix}]}"
    local dynamically="$(declare -F |sed 's,^declare -f ,,' | grep "^${longest_prefix}_" | sed "s,^${longest_prefix}_,,"|sed 's,_.*,,'|sort|uniq|tr '\n' ' ')"
    local extra=""
    if test "$( echo ${subcommands} | tr ' ' '\n'|sort|uniq|tr '\n' ' ')" '==' "$( echo ${dynamically} | tr ' ' '\n'|sort|uniq|tr '\n' ' ')"
    then
      true
    else
      extra=" [$(comm -13 <(echo ${subcommands} |  tr ' ' '\n'|sort|uniq) <(echo ${dynamically} |  tr ' ' '\n'|sort|uniq) | tr -d '\t' | tr ' ' '\n'|sort | uniq|tr '\n' ' ' | sed 's, *$,,')]"
    fi

    echo "Available sub-commands for ${longest_prefix} are: ${subcommands}${extra}" 1>&2
  elif echo "${@:${#args[@]}+1}" | sed 's,.* ,,'|grep -q completion; then
    local additional_completions
    if test "${longest_prefix}" '==' sys
    then
      additional_completions=""
    else
      additional_completions=$("${longest_prefix}" "${args[0]}" "${@:${#args[@]}+1}")
    fi

    compgen -W "${CMD_HIERARCHY[${longest_prefix}]} ${additional_completions}" -- "${args[1]}"
  else
    if test "${longest_prefix}" '==' sys
    then
      true
    else
      "${longest_prefix}" "${@:${#args[@]}+1}"
    fi
  fi
}

function sys_storage_block_disk_partitioning() {
  disk="$1"
  shift
  if echo "$@" |grep -qi zfs
  then
    MAIN=ZFS
  else
    MAIN=DATA
  fi

  size=$(echo $(lsblk -n -d -b -o SIZE "${disk}") 1024/ 1024/ 1024/ 2- 5- 4- 3- p |dc)

  for i in \
    n 1 "" +768m EF00 \
    n 2 "" +32m EF02 \
    n 3 "" +32m 8301 \
    n 4 "" +32m 8301 \
    n 5 "" +32m 8301 \
    n 6 "" +5g 8301 \
    n 7 "" +4g 8301 \
    n 8 "" +3g 8301 \
    n 9 "" +"${size}"g 8309 \
    c 1 EFI \
    c 2 BIOSGRUB \
    c 3 IDEN \
    c 4 CONF \
    c 5 ENTROPY \
    c 6 CACHE \
    c 7 VOLATILE \
    c 8 LOG \
    c 9 "${MAIN}" \
    x a 1 2 "" \
    p w y
      do
        echo "$i"
      done
}


function sys_storage_block() {
  true
}

function sys_storage_block_list() {
  lsblk -n -l -p
}

function sys_storage_block_disk_list() {
  (
    set -o pipefail
    lsblk -n -l -p -d | awk '{print $1}'
  )
}

function sys_storage_block_part_list() {
  device="$1"
  if test -z "${device}"
  then
    sys debug exit 2 "Device not provided"
  fi

  if ! test -e "${device}"
  then
    sys debug exit 1 "Device entry \"${device}\" not present"
  fi

  (
    set -o pipefail
    lsblk -n -l -p "${device}" |grep -v "^${device} .* disk" |grep " part" | awk '{print $1}'
  )
}

function sys_storage_block_part() {
  true
}

function sys_storage_block_disk() {
  true
}

function sys_storage_block_disk_match() {
  local matches=()

  for disk in $(sys storage block disk list)
  do
    if dd if="${disk}" of=/dev/null bs=65536 count=1 2>/dev/null && test $(head -c 65536 < "${disk}" | tr -d '\0' |wc -c) -eq 0
    then
      if test $( expr $(lsblk -n -d -b -o SIZE "${disk}") / 1048576) -ge 62464
      then
        matches+=("${disk}")
      fi
    fi
  done

  if test $(echo ${matches[@]} | tr -d '\n ' | wc -c) -eq 0
  then
    sys debug exit 1 "No disk match"
  fi

  echo -n ${matches[@]}
}

function sys_storage_block_part_match() {
  MATCH="$1"
  shift
  if test -z "${MATCH}"
  then
    sys debug exit 2 "Prefix to match against not provided"
  fi

  if test $(echo "$@" | tr -d '\t\n ' |wc -c) -eq 0
  then
    disks="$(sys storage block disk list)"
  else
    disks="$@"
  fi

  local matches=()
  for disk in ${disks}
  do
    for part in $(sys storage block part list "${disk}")
    do
      if blkid -s LABEL -s PARTLABEL -o value "${part}" | grep -q '^'"${MATCH}"
      then
        matches+=("${part}")
      fi
    done
  done

  if test $(echo ${matches[@]} | tr -d '\n ' | wc -c) -eq 0
  then
    sys debug exit 1 "No partition match for \"${MATCH}\""
  fi

  unset MATCH
  echo -n ${matches[@]}
}

function sys_storage_block_part_mkfs() {
  local part="$1"
  shift
  local name="$1"
  shift
  local fs=ext4

  if echo "$@" |grep -iq fat >/dev/null 2>/dev/null
  then
    fs=fat
  elif echo "$@" |grep -iq xfs >/dev/null 2>/dev/null
  then
    fs=xfs
  fi

  if test -z "${name}"
  then
    sys debug exit 2 "No name designator given for partition \"${part}\""
  fi

  if ! test -b "${part}"
  then
    sys debug exit 1 "Block partition \"${part}\" is not known to be a block device"
  fi

  if ! blkid -s LABEL -s PARTLABEL -o value "${part}" | grep -q '^'"${name}"
  then
    sys debug exit 1 "Block partition \"${part}\" does not match name \"${name}\""
  fi

  local dir=""
  if test -e /mnt/"${name}"
  then
    dir=/mnt/"${name}"-"${RANDOM}"-"${SRANDOM}"-"${PPID}"-"$$"
  else
    dir=/mnt/"${name}"
  fi

  sys debug trace "Prepare to mkfs type ${fs} for name ${name} on partition ${part}"
  mkdir "${dir}"
  if test "${fs}" '==' ext4
  then
    mkfs.ext4 -e continue -j -L "${name}" -m 8 -M /mnt/"${name}" -v "${part}" </dev/null || return $?
    mount -v -t ext4 "${part}" "${dir}" 1>&2 || return $?
  elif test "${fs}" == fat
  then
    mkfs.fat -F 32 -n "${name}" --invariant -v "${part}" </dev/null || return $?
    mount -v -t vfat "${part}" "${dir}" 1>&2 || return $?
    mkdir "${dir}"/syslinux || return $?
  elif test "${fs}" == xfs
  then
    sys debug exit 1 "Unimplemented"
    return 1
  fi

  mkdir "${dir}"/"${name}" || return $?

  if echo "${name}" |grep -qi "^LOG" >/dev/null 2>/dev/null
  then
    chmod --verbose 3775 "${dir}"/"${name}"
    chattr -V +a "${dir}"/"${name}"
    chattr -V +a "${dir}"
  fi

  umount -v "${dir}" 1>&2 || return $?
  rmdir "${dir}" || return $?
  sync
  unset dir
  unset fs
  unset name
  unset part

  return 0
}

function sys_storage_block_disk_mkfs() {
  local disk="$1"
  shift
  local name="$1"
  shift

  parts="$(sys storage block part match "${name}" "${disk}")"

  sys debug trace "Set to perform mkfs on partitions \"${parts}\" matching name ${name} on disk ${disk}"
  RET=0
  for part in ${parts}
  do
    sys storage block part mkfs "${part}" "${name}" "$@" || RET="$?"
  done

  return "${RET}"
}

function sys_storage_block_disk_syslinux() {
  local disk="$1"
  shift

  part="$(sys storage block part match EFI "${disk}")"
  sys debug trace "Syslinux install on partition ${part} disk ${disk}"
  syslinux --install --stupid --raid --directory /syslinux "${part}" || return $?
  sys debug trace "Syslinux copy to boot sector on disk ${disk}"
  dd if=/usr/lib/syslinux/mbr/gptmbr.bin of="${disk}" bs=440 count=1 conv=notrunc || return $?

  sys storage block disk refresh
}

function sys_storage_block_disk_refresh() {
  for opt in "-s" "-d" ""; do partprobe ${opt} 2>/dev/null; sleep 1; sync; done
  udevadm settle
  udevadm trigger
  sync
  sleep 1
}

function sys_storage_block_disk_partition() {
  disk="$1"
  shift
  if echo "$@" |grep -qi zfs
  then
    MAIN=ZFS
  else
    MAIN=DATA
  fi

  if test $(head -c 65536 < "${disk}" | tr -d '\0' |wc -c) -ne 0 || test $( expr $(lsblk -n -d -b -o SIZE "${disk}") / 1048576) -lt 62464
  then
    sys debug exit 1 "Disk ${disk} is not a candidate for partitioning"
    return 1
  fi

  sys debug trace "Disk ${disk} is considered a valid candidate. Will repartition"
  sleep 3
  sync
  sys debug trace "Disk ${disk}: clearing partition tables"
  sgdisk --zap-all "${disk}" || return $?
  dd if=/dev/zero of="${disk}" bs=65536 count=1 2>/dev/null || return $?
  sgdisk --zap-all "${disk}" || return $?
  sys storage block disk refresh

  sys debug trace "Disk ${disk}: partition ${MAIN}"
  sys storage block disk partitioning "${disk}" ${MAIN} |gdisk "${disk}" || return $?
  sys storage block disk refresh

  for name in "EFI fat" IDEN CONF CACHE LOG
  do
    sys debug trace "mkfs on disk ${disk} name ${name}"
    sys storage block disk mkfs "${disk}" ${name} || return $?
  done
}

sys_date() {
  LANG=C LC_ALL=C TZ=Universal date +"%Y.%m.%d-%H.%M.%S-%N" | LANG=C LC_ALL=C head -c 30
}

sys_crypt() {
  true
}

sys_crypt_tmpdir() {
  if ! opts="$(getopt -o "h" -l "help,delete:" -n "${0##*/}" -- "$@")"
  then
    sys debug exit 2 "Parse error: \"$@\""
  fi

  delete=0
  eval "set -- ${opts}"
  while [ $# -gt 0 ]
  do
    case "$1" in
      -h|--help)
        sys debug exit 3 "Omit argument to create, or else provide --delete='[DIR]'"
        return 3
        ;;
      --delete)
        dir="$2"
        delete=1
        shift 2
        ;;
      --)
        shift
        break
        ;;
    esac
  done

  if test "${delete}" -eq 0
  then
    (
      umask 077
      mktemp --directory "$(mktemp --directory /dev/shm/tmp.XXXXXXXXXX)"/tmp."${SRANDOM}"."${RANDOM}".XXXXXXXXXX
    )
  else
    if ! test -e "${dir}"
    then
      sys debug exit 1 "Directory to delete \"${dir}\" does not exist"
    fi
    if ! test -d "${dir}"
    then
      sys debug exit 1 "Entry to delete \"${dir}\" is not a directory"
    fi
    if ! test -O "${dir}"
    then
      sys debug exit 1 "Directory \"${dir}\" not owned by user"
    fi

    if echo X"${dir}" |grep -q '^X/dev/shm/tmp\.[^/]*/tmp\.'
    then
      chmod -R go-rwx "${dir}" >/dev/null 2>/dev/null || true
      rm -r "${dir}"
      rmdir "$(echo "${dir}" |sed 's,^\(/dev/shm/tmp\.[^/]*\)/.*,\1,')"
    else
      sys debug exit 1 "Directory \"${dir}\" does not conform to expected pattern"
    fi
  fi
}

sys_crypt_dir() {
  if test "$(id -u)" -eq 0
  then
    if test -d "/dev/shm/crypt/root"
    then
      if ! test -O /dev/shm/crypt/root
      then
        sys debug exit 1 "Improper ownership on /dev/shm/crypt/root"
      fi

      chmod go-rwx "/dev/shm/crypt/root" >/dev/null 2>/dev/null || true
      (umask 077 && mkdir --mode=700 -p /dev/shm/crypt/root/self /dev/shm/crypt/root/upstream /dev/shm/crypt/root/extern >/dev/null 2>/dev/null || true)
      echo "/dev/shm/crypt/root"
    else
      (umask 0 && mkdir --mode=1777 -p /dev/shm/crypt >/dev/null 2>/dev/null || true)
      (umask 077 && mkdir --mode=700 -p /dev/shm/crypt/root >/dev/null 2>/dev/null || true)
      (umask 077 && mkdir --mode=700 -p /dev/shm/crypt/root/self /dev/shm/crypt/root/upstream /dev/shm/crypt/root/extern >/dev/null 2>/dev/null || true)
      echo "/dev/shm/crypt/root"
    fi
  else
    true

    if ! test -d "${HOME}"/.local/.
    then
      (umask 027 && mkdir --mode=0750 -p "${HOME}"/.local >/dev/null 2>/dev/null)
    fi

    if ! test -d "${HOME}"/.local/crypt/.
    then
      (umask 077 && mkdir --mode=0700 -p "${HOME}"/.local/crypt >/dev/null 2>/dev/null)
    fi

    (umask 077 && mkdir --mode=0700 -p "${HOME}"/.local/crypt/self "${HOME}"/.local/crypt/upstream "${HOME}"/.local/crypt/extern >/dev/null 2>/dev/null)

    chmod go-rwx "${HOME}"/.local/crypt/. >/dev/null 2>/dev/null || true
    FSTYPE="$(df --local --no-sync --output=fstype "${HOME}"/.local/crypt/. 2>/dev/null | tail -n 1)"
    if test "${FSTYPE}" '==' rootfs || test "${FSTYPE}" '==' tmpfs # ...fuse
    then
      echo "${HOME}"/.local/crypt
    elif test "${FSTYPE}" '==' zfs && zfs get encryption "$(df --local --no-sync --output=source | tail -n 1)" |grep -q " encryption  *aes" >/dev/null 2>/dev/null
    then
      echo "${HOME}"/.local/crypt
    else
      mkdir --mode=0700 -p /dev/shm/crypt/"${USER}" >/dev/null 2>/dev/null || true
      mkdir --mode=0700 -p /dev/shm/crypt/"${USER}"/local /dev/shm/crypt/"${USER}"/upstream /dev/shm/crypt/"${USER}"/extern  >/dev/null 2>/dev/null || true
      chmod go-rwx /dev/shm/crypt/"${USER}" >/dev/null 2>/dev/null || true
      if ! test -d /dev/shm/crypt/"${USER}"/.
      then
        echo /bin/false/false
        return 1
      elif ! test -O /dev/shm/crypt/"${USER}"/.
      then
        echo /bin/false/false
        return 1
      else
        echo /dev/shm/crypt/"${USER}"
      fi
    fi

    unset FSTYPE
  fi
}

sys_crypt_entropy() {
  true
}

sys_crypt_entropy_ingest() {
  (
    wdir="$(sys crypt dir)"
    set +e
    set +o pipefail
    umask 077

    (
      set -x
      export LANG=C
      export LC_ALL=C
      export TERM=dumb
      export TTY=/dev/null
      export TMP="${wdir}"
      export TEMP="${TMP}"
      export TMPDIR="${TMP}"
      vmstat -d -t -w
      time sync
      vmstat -D -t -w
      vmstat -s -t -w
      vmstat -a -t -w
      zdb -lll || true
      env
      ipcs -a
      dd if=/dev/urandom bs=37 count=1
      echo "${SRANDOM}" "${SRANDOM}" "${SRANDOM}" "${RANDOM}"
      sysctl -a
      date +%s.%N
      netstat -vWn --numeric-hosts --numeric-ports --numeric-users --extend --timers --program --all
      time sync
      lsblk -O
      lsblk -l -p | grep disk | cut -f1 -d" " | while read disk; do udevadm info --query=all --name="${disk}"; done
      unset disk
      dd if=/dev/hwrng bs=1024 count=6 || true
      hostname
      ifconfig -a
      zpool status -v || true
      ip a
      dpkg -l
      date +%s.%N
      mpstat -A
      iostat  -x -t
      arp -a -n
      date +%s.%N
      netstat -rn
      time ps axufwwwwwwwwe
      /usr/bin/time -v curl -v https://etherscan.io
      lsusb -vv
      lspci -vv
      zpool iostat -v || true
      lscpu
      lshw
      sha256sum < "${wdir}"/entropy.seed || true
      lsdev
      date +%s.%N
      lsmod
      lsscsi
      dmesg
      vmstat -s
      uname -a
      iostat
      whirlpool-hash - < "${wdir}"/entropy.seed || true
      mpstat
      vmstat -f
      uptime
      vmstat
      sha512sum < "${wdir}"/entropy.seed || true
      date +%s.%N
      lsof
      lsof -n -i
      /usr/bin/time -v curl -v 'https://www.random.org/cgi-bin/randbyte?nbytes=4096&format=h'
    ) 2>&1 |
      gzip -1qf |
      seccure-encrypt -m 0 "$(seccure-key -F /dev/null 2>/dev/null | sed 's,^The public key is: ,,')" 2>/dev/null |
      age -r $( (age-keygen >/dev/null) 2>&1 | awk '{print $3}') 2>/dev/null |
      tee -a >(rm -f "${wdir}"/entropy.seed || true; ( (tee -a >(sha512sum 1>&2) >(whirlpool-hash - 1>&2) >(sha256sum 1>&2)) >/dev/null ) 2>&1 | dd of="${wdir}"/entropy.seed status=none || true; true) |
      openssl enc -aes-256-ctr -kfile /dev/urandom -e 2>/dev/null
  )
}

sys_crypt_entropy_evolve () {
  (
    wdir="$(sys crypt dir)"
    set -e
    set +x
    set +o pipefail
    umask 077
    export LANG=C
    export LC_ALL=C
    export TERM=dumb
    export TTY=/dev/null
    export TMP="${wdir}"
    export TEMP="${TMP}"
    export TMPDIR="${TMP}"

    openssl enc -camellia-256-cfb8 -kfile /dev/urandom -e 2>/dev/null |
      age -r $( (age-keygen >/dev/null) 2>&1 | awk '{print $3}') 2>/dev/null |
      openssl enc -aes-256-ctr -kfile /dev/urandom -e 2>/dev/null |
      pee sha512sum b2sum cksum "sha256sum ${wdir}/entropy.seed 2>&1 || true" md5sum md5sum.textutils sha1sum sha256sum tigerdeep whirlpooldeep gost12sum gostsum xxh128sum "nettle-hash --algorithm=streebog512" "nettle-hash --algorithm=sha512" "nettle-hash --algorithm=sha3_512" "openssl shake256" "rhash -a --verbose -" "edonr512-hash -" "gost12-512-hash -" "has160-hash -" "whirlpool-hash -" "openssl shake256" 2>/dev/null |
      pee sha512sum xxh128sum gostsum gost12sum whirlpooldeep "sha512sum ${wdir}/entropy.seed 2>&1 || true" tigerdeep sha256sum sha1sum md5sum.textutils md5sum cksum b2sum "openssl shake256" "whirlpool-hash -" "has160-hash -" "gost12-512-hash -" "edonr512-hash -" "rhash -a --verbose -" "openssl shake256" "nettle-hash --algorithm=sha3_512" "nettle-hash --algorithm=sha512" "nettle-hash --algorithm=streebog512" 2>/dev/null |
      pee "openssl enc -aes-256-ctr -kfile /dev/urandom -e || true" "openssl enc -aria-256-ofb -kfile /dev/urandom -e || true" "openssl enc -camellia-256-cfb8 -kfile /dev/urandom -e || true" "openssl enc -cast5-ofb -kfile /dev/urandom -e || true" 2>/dev/null |
      ccrypt -k /dev/urandom 2>/dev/null |
      tee -a >(rm -f "${wdir}"/entropy.seed || true; ( (tee -a >(sha256sum 1>&2) >(sha512sum 1>&2) >(whirlpool-hash - 1>&2) ) >/dev/null ) 2>&1 | dd of="${wdir}"/entropy.seed status=none || true; true) |
      age -r $( (age-keygen >/dev/null) 2>&1 | awk '{print $3}') 2>/dev/null |
      openssl enc -camellia-256-cfb8 -kfile /dev/urandom -e 2>/dev/null
  )
}

sys_crypt_generate() {
  true
}

sys_crypt_generate_seed() {
  (
    set +o pipefail

    sys crypt entropy ingest |
      sys crypt entropy evolve |
      sys crypt entropy evolve |
      dd bs=228 count=1 status=none |
      base64 |
      tr '\n' ' ' |
      sed 's, *$,,'
  )
}

sys_crypt_validate() {
  wdir="$(sys crypt dir)"
  for arg in "$@"
  do
    preamble="${arg}"

    if echo X"${preamble}" | grep -q "\.\." >/dev/null
    then
      sys debug exit 2 "Invalid reference for key"
    fi

    if echo X"${preamble}" | grep -q "/[^/]*/[^/]*/" >/dev/null
    then
      sys debug exit 2 "Invalid reference for key"
    fi

    if echo X"${preamble}" | grep -q '/\.' >/dev/null
    then
      sys debug exit 2 "Invalid reference for key"
    fi

    if echo X"${preamble}" | grep -q '^X\.'
    then
      preamble="$(echo X"${preamble}" | sed 's,^X\.,self,')"
    fi

    if ! test -d "${wdir}"/"${preamble}"/.
    then
      sys debug exit 1 "Cannot confirm presence of key \"${preamble}\""
    fi

    if ! echo X"${preamble}" | grep -q "^X[seu][exp][lts][fet]" >/dev/null 2>/dev/null
    then
      sys debug exit 2 "Invalid prefix for key"
    fi

    if echo X"${preamble}" |grep -q '^Xextern'
    then
      if ! echo X"${preamble}" | grep -q '/[^/\.]'
      then
        sys debug exit 2 "Invalid reference for key"
      fi
    fi

    if echo X"${preamble}" |grep -q '^Xself'
    then
      if echo X"{preamble}" |grep -q '^self/[^/]*/'
      then
        sys debug exit 2 "Invalid reference for key"
      fi
    fi

    if echo X"${preamble}" |grep -q '^Xupstream'
    then
      if echo X"{preamble}" |grep -q '^upstream/[^/]*/'
      then
        sys debug exit 2 "Invalid reference for key"
      fi
    fi

    if echo X"${preamble}" | grep -q '/$'
    then
      first="$(echo X"${preamble}" | sed 's,^X,,' | sed 's,/$,,')"
      preambles=( "${first}" $(cd "${wdir}"/"${first}"/./ && find . -mindepth 2 -maxdepth 2 -type f -name genesis.stamp -print | sed 's,^\./,,' |grep / | sed 's,/genesis.stamp$,,' | sed 's:^:'"${first}"/':' |sort|uniq|grep .) )
    else
      preambles=( "${preamble}" )
    fi

    for entry in "${preambles[@]}"
    do
    (
      umask 077
      export TMP="${wdir}"
      export TEMP="${TMP}"
      export TMPDIR="${TMP}"
      set -o pipefail

      entrytype=root
      if test "$(echo X"${entry}")" '==' Xself || test "$(echo X"${entry}")" '==' Xupstream
      then
        if echo X"${entry}"|grep -q /.
        then
          entrytype=subkey
        fi
      else
        if echo X"${entry}"| sed 's,Xextern/,,' | grep -q /.
        then
          entrytype=subkey
        fi
      fi

      if test "${entrytype}" '==' root
      then
        if test -s "${wdir}"/"${entry}"/chain6.sig
        then
          if ! /usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" /usr/bin/ssh-keygen -Y verify -f <(echo -n root@localhost" " && cat "${wdir}"/"${entry}"/xmss.pub) -I root@localhost -n file.crypt.key.chain.xmss.top -s "${wdir}"/"${entry}"/chain6.sig < "${wdir}"/"${entry}"/chain5.sig >/dev/null
          then
            RET="$?"
            sys debug exit "${RET}" "Key validation failure for \"${entry}\""
          fi
        fi

        if test -s "${wdir}"/"${entry}"/chain5.sig
        then
          if ! /usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" /usr/local/bin/ssh-keygen -Y verify -f <(echo -n root@localhost" " && cat "${wdir}"/"${entry}"/falcon.pub) -I root@localhost -n file.crypt.key.chain.falcon.top -s "${wdir}"/"${entry}"/chain5.sig < "${wdir}"/"${entry}"/chain4.sig >/dev/null
          then
            RET="$?"
            sys debug exit "${RET}" "Key validation failure for \"${entry}\""
          fi
        fi

        if test -s "${wdir}"/"${entry}"/chain4.sig
        then
          if ! /usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" /usr/local/bin/ssh-keygen -Y verify -f <(echo -n root@localhost" " && cat "${wdir}"/"${entry}"/dilithium5.pub) -I root@localhost -n file.crypt.key.chain.dilithium5.top -s "${wdir}"/"${entry}"/chain4.sig < "${wdir}"/"${entry}"/chain3.sig >/dev/null
          then
            RET="$?"
            sys debug exit "${RET}" "Key validation failure for \"${entry}\""
          fi
        fi

        if ! /usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" /usr/bin/ssh-keygen -Y verify -f <(echo -n root@localhost" " && cat "${wdir}"/"${entry}"/ed25519.pub) -I root@localhost -n file.crypt.key.chain.ed25519.top -s "${wdir}"/"${entry}"/chain3.sig < "${wdir}"/"${entry}"/chain2.sig >/dev/null
        then
          RET="$?"
          sys debug exit "${RET}" "Key validation failure for \"${entry}\""
        fi

        if ! /usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" /usr/bin/ssh-keygen -Y verify -f <(echo -n root@localhost" " && cat "${wdir}"/"${entry}"/rsa.pub) -I root@localhost -n file.crypt.key.chain.rsa.top -s "${wdir}"/"${entry}"/chain2.sig < "${wdir}"/"${entry}"/chain.sig >/dev/null
        then
          RET="$?"
          sys debug exit "${RET}" "Key validation failure for \"${entry}\""
        fi

        cat "${wdir}"/"${entry}"/chain.sig |
          /usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" seccure-verify -b -f -a -c brainpoolp512r1 -- "$(cat "${wdir}"/"${entry}"/brainpoolp.pub)" 2>/dev/null |
          /usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" seccure-verify -b -f -a -c secp521r1 -- "$(cat "${wdir}"/"${entry}"/secp.pub)" 2>/dev/null |
          cmp - <(cat "${wdir}"/"${entry}"/genesis.stamp && for pub in brainpoolp rsa fmtseq secp mceqcmdpc256fo dilithium5 falcon xmss ed25519 agent; do if test -e "${wdir}"/"${entry}"/"${pub}".pub; then sha512sum < "${wdir}"/"${entry}"/"${pub}".pub | awk '{print $1}'; fi; done) || {
            RET="$?"
            sys debug exit "${RET}" "Key validation failure for \"${entry}\""
          }

        SUM=$(cd "${wdir}"/"${entry}"/. && optional=$(for i in chain4.sig chain5.sig chain6.sig dilithium5.pub falcon.pub xmss.pub; do if test -e "${i}"; then echo "${i}"; fi; done) && sha512sum -- genesis.stamp chain.sig chain2.sig chain3.sig brainpoolp.pub mceqcmdpc256fo.pub rsa.pub fmtseq.pub secp.pub ed25519.pub agent.pub ${optional} | sha512sum | awk '{print $1}' | head -c 128)

        if test -e "${wdir}"/"${entry}"/footprint.sig
        then
          if ! test "$(cat "${wdir}"/"${entry}"/footprint.sig | tr -d ' \t\n')" "==" "$(echo " " "${SUM}" | tr -d ' \t\n')"
          then
            sys debug exit 1 "Footprint for key differs"
          fi
        else
          echo " " "${SUM}" | tr -d ' \t\n' > "${wdir}"/"${entry}"/footprint.sig
        fi

      else
        if test -s "${wdir}"/"${entry}"/chain6.sig
        then
          if ! /usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" /usr/bin/ssh-keygen -Y verify -f <(echo -n root@localhost" " && cat "${wdir}"/"${entry}"/xmss.pub) -I root@localhost -n file.crypt.key.chain.xmss.subkey.chain6 -s "${wdir}"/"${entry}"/chain6.sig < "${wdir}"/"${entry}"/chain5.sig >/dev/null
          then
            RET="$?"
            sys debug exit "${RET}" "Key validation failure"
          fi
        fi

        if test -s "${wdir}"/"${entry}"/chain5.sig
        then
          if ! /usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" /usr/local/bin/ssh-keygen -Y verify -f <(echo -n root@localhost" " && cat "${wdir}"/"${entry}"/falcon.pub) -I root@localhost -n file.crypt.key.chain.falcon.subkey.chain5 -s "${wdir}"/"${entry}"/chain5.sig < "${wdir}"/"${entry}"/chain4.sig >/dev/null
          then
            RET="$?"
            sys debug exit "${RET}" "Key validation failure"
          fi
        fi

        if test -s "${wdir}"/"${entry}"/chain4.sig
        then
          if ! /usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" /usr/local/bin/ssh-keygen -Y verify -f <(echo -n root@localhost" " && cat "${wdir}"/"${entry}"/dilithium5.pub) -I root@localhost -n file.crypt.key.chain.dilithium5.subkey.chain4 -s "${wdir}"/"${entry}"/chain4.sig < "${wdir}"/"${entry}"/chain3.sig >/dev/null
          then
            RET="$?"
            sys debug exit "${RET}" "Key validation failure"
          fi
        fi

        if ! /usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" /usr/bin/ssh-keygen -Y verify -f <(echo -n root@localhost" " && cat "${wdir}"/"${entry}"/ed25519.pub) -I root@localhost -n file.crypt.key.chain.ed25519.subkey.chain3 -s "${wdir}"/"${entry}"/chain3.sig < "${wdir}"/"${entry}"/chain2.sig >/dev/null
        then
          RET="$?"
          sys debug exit "${RET}" "Key validation failure"
        fi

        if ! /usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" /usr/bin/ssh-keygen -Y verify -f <(echo -n root@localhost" " && cat "${wdir}"/"${entry}"/rsa.pub) -I root@localhost -n file.crypt.key.chain.rsa.subkey.chain2 -s "${wdir}"/"${entry}"/chain2.sig < "${wdir}"/"${entry}"/chain.sig >/dev/null
        then
          RET="$?"
          sys debug exit "${RET}" "Key validation failure"
        fi

        if test -s "${wdir}"/"${entry}"/master11.sig && test -s "${wdir}"/"${entry}"/master10.sig
        then
          if ! /usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" /usr/bin/ssh-keygen -Y verify -f <(echo -n root@localhost" " && cat "${wdir}"/"${entry}"/xmss.pub) -I root@localhost -n file.crypt.key.chain.xmss.subkey.master11 -s "${wdir}"/"${entry}"/master11.sig < "${wdir}"/"${entry}"/master10.sig >/dev/null
          then
            RET="$?"
            sys debug exit "${RET}" "Key validation failure"
          fi
        fi

        if test -s "${wdir}"/"${entry}"/master10.sig && test -s "${wdir}"/"${entry}"/master9.sig
        then
          if ! /usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" /usr/bin/ssh-keygen -Y verify -f <(echo -n root@localhost" " && cat "${wdir}"/"${entry}"/../xmss.pub) -I root@localhost -n file.crypt.key.chain.xmss.subkey.master10 -s "${wdir}"/"${entry}"/master10.sig < "${wdir}"/"${entry}"/master9.sig >/dev/null
          then
            RET="$?"
            sys debug exit "${RET}" "Key validation failure"
          fi
        fi

        if test -s "${wdir}"/"${entry}"/master9.sig && test -s "${wdir}"/"${entry}"/master8.sig
        then
          if ! /usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" /usr/local/bin/ssh-keygen -Y verify -f <(echo -n root@localhost" " && cat "${wdir}"/"${entry}"/falcon.pub) -I root@localhost -n file.crypt.key.chain.falcon.subkey.master9 -s "${wdir}"/"${entry}"/master9.sig < "${wdir}"/"${entry}"/master8.sig >/dev/null
          then
            RET="$?"
            sys debug exit "${RET}" "Key validation failure"
          fi
        fi

        if test -s "${wdir}"/"${entry}"/master8.sig && test -s "${wdir}"/"${entry}"/master7.sig
        then
          if ! /usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" /usr/local/bin/ssh-keygen -Y verify -f <(echo -n root@localhost" " && cat "${wdir}"/"${entry}"/../falcon.pub) -I root@localhost -n file.crypt.key.chain.falcon.subkey.master8 -s "${wdir}"/"${entry}"/master8.sig < "${wdir}"/"${entry}"/master7.sig >/dev/null
          then
            RET="$?"
            sys debug exit "${RET}" "Key validation failure"
          fi
        fi

        if test -s "${wdir}"/"${entry}"/master7.sig && test -s "${wdir}"/"${entry}"/master6.sig
        then
          if ! /usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" /usr/local/bin/ssh-keygen -Y verify -f <(echo -n root@localhost" " && cat "${wdir}"/"${entry}"/dilithium5.pub) -I root@localhost -n file.crypt.key.chain.dilithium5.subkey.master7 -s "${wdir}"/"${entry}"/master7.sig < "${wdir}"/"${entry}"/master6.sig >/dev/null
          then
            RET="$?"
            sys debug exit "${RET}" "Key validation failure"
          fi
        fi

        if test -s "${wdir}"/"${entry}"/master6.sig && test -s "${wdir}"/"${entry}"/master5.sig
        then
          if ! /usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" /usr/local/bin/ssh-keygen -Y verify -f <(echo -n root@localhost" " && cat "${wdir}"/"${entry}"/../dilithium5.pub) -I root@localhost -n file.crypt.key.chain.dilithium5.subkey.master6 -s "${wdir}"/"${entry}"/master6.sig < "${wdir}"/"${entry}"/master5.sig >/dev/null
          then
            RET="$?"
            sys debug exit "${RET}" "Key validation failure"
          fi
        fi

        if ! /usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" /usr/bin/ssh-keygen -Y verify -f <(echo -n root@localhost" " && cat "${wdir}"/"${entry}"/ed25519.pub) -I root@localhost -n file.crypt.key.chain.ed25519.subkey.master5 -s "${wdir}"/"${entry}"/master5.sig < "${wdir}"/"${entry}"/master4.sig >/dev/null
        then
          RET="$?"
          sys debug exit "${RET}" "Key validation failure"
        fi

        if ! /usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" /usr/bin/ssh-keygen -Y verify -f <(echo -n root@localhost" " && cat "${wdir}"/"${entry}"/../ed25519.pub) -I root@localhost -n file.crypt.key.chain.ed25519.subkey.master4 -s "${wdir}"/"${entry}"/master4.sig < "${wdir}"/"${entry}"/master3.sig >/dev/null
        then
          RET="$?"
          sys debug exit "${RET}" "Key validation failure"
        fi

        if ! /usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" /usr/bin/ssh-keygen -Y verify -f <(echo -n root@localhost" " && cat "${wdir}"/"${entry}"/rsa.pub) -I root@localhost -n file.crypt.key.chain.rsa.subkey.master3 -s "${wdir}"/"${entry}"/master3.sig < "${wdir}"/"${entry}"/master2.sig >/dev/null
        then
          RET="$?"
          sys debug exit "${RET}" "Key validation failure"
        fi

        if ! /usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" /usr/bin/ssh-keygen -Y verify -f <(echo -n root@localhost" " && cat "${wdir}"/"${entry}"/../rsa.pub) -I root@localhost -n file.crypt.key.chain.rsa.subkey.master2 -s "${wdir}"/"${entry}"/master2.sig < "${wdir}"/"${entry}"/master.sig >/dev/null
        then
          RET="$?"
          sys debug exit "${RET}" "Key validation failure"
        fi

        cat "${wdir}"/"${entry}"/chain.sig |
          /usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" seccure-verify -b -f -a -c brainpoolp512r1 -- "$(cat "${wdir}"/"${entry}"/brainpoolp.pub)" 2>/dev/null |
          /usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" seccure-verify -b -f -a -c secp521r1 -- "$(cat "${wdir}"/"${entry}"/secp.pub)" 2>/dev/null |
          cmp - <(cat "${wdir}"/"${entry}"/../genesis.stamp "${wdir}"/"${entry}"/genesis.stamp && for pub in brainpoolp mceqcmdpc256fo secp rsa fmtseq dilithium5 falcon xmss ed25519 agent; do if test -e "${wdir}"/"${entry}"/"${pub}".pub; then sha512sum < "${wdir}"/"${entry}"/"${pub}".pub | awk '{print $1}'; fi; if test -e "${wdir}"/"${entry}"/../"${pub}".pub; then sha512sum < "${wdir}"/"${entry}"/../"${pub}".pub | awk '{print $1}'; fi; done) || {
            RET="$?"
            sys debug exit "${RET}" "Key validation failure"
          }

        cat "${wdir}"/"${entry}"/master.sig |
          /usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" seccure-verify -b -f -a -c secp521r1 -- "$(cat "${wdir}"/"${entry}"/secp.pub)" 2>/dev/null |
          /usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" seccure-verify -b -f -a -c brainpoolp512r1 -- "$(cat "${wdir}"/"${entry}"/../brainpoolp.pub)" 2>/dev/null |
          /usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" seccure-verify -b -f -a -c brainpoolp512r1 -- "$(cat "${wdir}"/"${entry}"/brainpoolp.pub)" 2>/dev/null |
          /usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" seccure-verify -b -f -a -c secp521r1 -- "$(cat "${wdir}"/"${entry}"/../secp.pub)" 2>/dev/null |
          cmp - <(cat "${wdir}"/"${entry}"/../genesis.stamp "${wdir}"/"${entry}"/../chain.sig "${wdir}"/"${entry}"/chain.sig "${wdir}"/"${entry}"/../chain2.sig "${wdir}"/"${entry}"/chain2.sig "${wdir}"/"${entry}"/../chain3.sig "${wdir}"/"${entry}"/chain3.sig "${wdir}"/"${entry}"/genesis.stamp && for i in "${wdir}"/"${entry}"/../chain4.sig "${wdir}"/"${entry}"/chain4.sig "${wdir}"/"${entry}"/../chain5.sig "${wdir}"/"${entry}"/chain5.sig "${wdir}"/"${entry}"/../chain6.sig "${wdir}"/"${entry}"/chain6.sig; do if test -e "${i}"; then sha512sum < "$i" | awk '{print $1}'; fi; done && for pub in dilithium5 falcon xmss agent; do if test -e "${wdir}"/"${entry}"/"${pub}".pub; then sha512sum < "${wdir}"/"${entry}"/"${pub}".pub | awk '{print $1}'; fi; if test -e "${wdir}"/"${entry}"/../"${pub}".pub; then sha512sum < "${wdir}"/"${entry}"/../"${pub}".pub | awk '{print $1}'; fi; done && for pub in rsa fmtseq mceqcmdpc256fo secp brainpoolp ed25519; do sha512sum < "${wdir}"/"${entry}"/"${pub}".pub | awk '{print $1}'; sha512sum < "${wdir}"/"${entry}"/../"${pub}".pub | awk '{print $1}'; done) || {
            RET="$?"
            sys debug exit "${RET}" "Key validation failure"
          }

        SUM=$(cd "${wdir}"/"${entry}"/. && optional=$(for i in chain4.sig chain5.sig chain6.sig master6.sig master7.sig master8.sig master9.sig master10.sig master11.sig dilithium5.pub falcon.pub xmss.pub agent.pub; do if test -e "${i}"; then echo "${i}"; fi; done) && sha512sum -- genesis.stamp chain.sig chain2.sig chain3.sig brainpoolp.pub mceqcmdpc256fo.pub rsa.pub fmtseq.pub secp.pub ed25519.pub master.sig master2.sig master3.sig master4.sig master5.sig ${optional} | sha512sum | awk '{print $1}' | head -c 128)

        if test -e "${wdir}"/"${entry}"/footprint.sig
        then
          if ! test "$(cat "${wdir}"/"${entry}"/footprint.sig | tr -d ' \t\n')" "==" "$(echo " " "${SUM}" | tr -d ' \t\n')"
          then
            sys debug exit 1 "Footprint for key differs"
          fi
        else
          echo " " "${SUM}" | tr -d ' \t\n' > "${wdir}"/"${entry}"/footprint.sig
        fi

      fi
    ) || sys debug exit "$?" "Key validation failure for \"${entry}\""
    done
  done
}

sys_crypt_key() {
  wdir="$(sys crypt dir)"
  exists=0

  if test -e "${wdir}"/self/brainpoolp.sec || test -e "${wdir}"/self/secp.sec || test -e "${wdir}"/self/rsa.sec || test -e "${wdir}"/self/mceqcmdpc256fo.sec || test -e "${wdir}"/self/ed25519.sec -o -e "${wdir}"/self/ed25519.enc
  then
    if test -e "${wdir}"/self/brainpoolp.sec && test -e "${wdir}"/self/secp.sec && test -e "${wdir}"/self/rsa.sec && test -e "${wdir}"/self/mceqcmdpc256fo.sec && test -e "${wdir}"/self/ed25519.sec -o -e "${wdir}"/self/ed25519.enc
    then
      exists=1
    else
      sys debug exit 1 "Pre-existing secret keys are not a complete set"
    fi
  fi

  if test -e "${wdir}"/self/brainpoolp.pub || test -e "${wdir}"/self/secp.pub || test -e "${wdir}"/self/rsa.pub || test -e "${wdir}"/self/mceqcmdpc256fo.pub || test -e "${wdir}"/self/ed25519.pub
  then
    if test -e "${wdir}"/self/brainpoolp.pub && test -e "${wdir}"/self/secp.pub && test -e "${wdir}"/self/rsa.pub && test -e "${wdir}"/self/mceqcmdpc256fo.pub && test -e "${wdir}"/self/ed25519.pub
    then
      exists=1
    else
      sys debug exit 1 "Pre-existing public keys are not a complete set"
    fi
  fi

  if test "${exists}" -eq 0
  then
  (
    umask 077
    export TMP="${wdir}"
    export TEMP="${TMP}"
    export TMPDIR="${TMP}"
    set -o pipefail
    GENESIS="$(sys date)"
    sys crypt generate seed > "${wdir}"/self/brainpoolp.sec || return $?
    /usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" /usr/bin/ssh-keygen -t rsa -b 10240 -N "" -C user -f "${wdir}"/self/rsa >/dev/null 2>/dev/null || return $?
    /usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" /usr/bin/ssh-keygen -t xmss -b 16 -N "" -C user -f "${wdir}"/self/xmss >/dev/null 2>/dev/null || true
    /usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" /usr/bin/ssh-keygen -t ed25519 -N "" -C agent -f "${wdir}"/self/agent >/dev/null 2>/dev/null || return $?
    mv "${wdir}"/self/agent "${wdir}"/self/agent.sec || return $?
    dd if=/dev/urandom bs=2048 count=1 status=none | sha512sum | awk '{print $1}' > "${wdir}"/self/agent.seed || return $?
    /usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" /usr/bin/ssh-keygen -t ed25519 -N "" -C user -f "${wdir}"/self/ed25519 >/dev/null 2>/dev/null || return $?
    mv "${wdir}"/self/ed25519 "${wdir}"/self/ed25519.sec || return $?
    /usr/bin/ssh-keygen -Y sign -f "${wdir}"/self/agent.sec -n file.crypt.key.chain.agent 2>/dev/null <"${wdir}"/self/agent.seed | sha512sum | awk '{print $1}' | /usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" ccrypt --encrypt --brave --force --keyfile - --prompt "" --prompt2 "" -- "${wdir}"/self/ed25519.sec || return $?
    mv -f "${wdir}"/self/ed25519.sec.cpt "${wdir}"/self/ed25519.enc || return $?
    rm -f "${wdir}"/self/ed25519.sec || return $?
    sys crypt generate seed > "${wdir}"/self/secp.sec || return $?
    /usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" /usr/local/bin/ssh-keygen -t dilithium5 -N "" -C user -f "${wdir}"/self/dilithium5 >/dev/null 2>/dev/null || rm -f "${wdir}"/self/dilithium5 "${wdir}"/self/dilithium5.pub >/dev/null 2>/dev/null
    /usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" /usr/local/bin/ssh-keygen -t falcon1024 -N "" -C user -f "${wdir}"/self/falcon >/dev/null 2>/dev/null || rm -f "${wdir}"/self/falcon "${wdir}"/self/falcon.pub >/dev/null 2>/dev/null
    mkdir -p "${wdir}"/self/ccr.d >/dev/null 2>/dev/null
    /usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" HOME="${wdir}"/self/ccr.d ccr -g FMTSEQ256C-SHA512-SHA256 -y --name self 2>/dev/null || return $?
    /usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" HOME="${wdir}"/self/ccr.d ccr -p -y -a -F self -N other > "${wdir}"/self/fmtseq.pub
    mv -f "${wdir}"/self/ccr.d/.ccr/secrets "${wdir}"/self/fmtseq.sec
    rm -r -f "${wdir}"/self/ccr.d/ || true

    mkdir -p "${wdir}"/self/.ccr >/dev/null 2>/dev/null || true
    /usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" HOME="${wdir}"/self ccr -g MCEQCMDPC256FO-SHA512-CHACHA20 -y --name self 2>/dev/null || return $?
    /usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" HOME="${wdir}"/self ccr -p -y -a -F self -N other |sed 's, publickeys [^-]*, publickeys canon,' > "${wdir}"/self/mceqcmdpc256fo.pub || return $?
    mv -f "${wdir}"/self/.ccr/secrets "${wdir}"/self/mceqcmdpc256fo.sec >/dev/null 2>/dev/null || return $?
    rm -f "${wdir}"/self/.ccr/secrets "${wdir}"/self/.ccr/pubkeys "${wdir}"/self/.ccr/secrets\~ "${wdir}"/self/.ccr/pubkeys\~ "${wdir}"/self/.ccr/lock >/dev/null 2>/dev/null || true
    rmdir "${wdir}"/self/.ccr || return $?

    /usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" seccure-key -c brainpoolp512r1 -F "${wdir}"/self/brainpoolp.sec | sed "s,^The public key is: ,," > "${wdir}"/self/brainpoolp.pub || return $?
    /usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" seccure-key -c secp521r1 -F "${wdir}"/self/secp.sec | sed "s,^The public key is: ,," > "${wdir}"/self/secp.pub || return $?
    mv "${wdir}"/self/rsa "${wdir}"/self/rsa.sec || return $?
    mv -f "${wdir}"/self/dilithium5 "${wdir}"/self/dilithium5.sec >/dev/null 2>/dev/null || true
    mv -f "${wdir}"/self/falcon "${wdir}"/self/falcon.sec >/dev/null 2>/dev/null || true
    mv -f "${wdir}"/self/xmss "${wdir}"/self/xmss.sec >/dev/null 2>/dev/null || true

    echo "${GENESIS}" >> "${wdir}"/self/genesis.stamp
    unset GENESIS
    rm -f "${wdir}"/self/chain.sig "${wdir}"/self/chain2.sig "${wdir}"/self/chain3.sig "${wdir}"/self/chain4.sig >/dev/null 2>/dev/null || true
    (cat "${wdir}"/self/genesis.stamp &&
      for pub in brainpoolp rsa fmtseq secp mceqcmdpc256fo dilithium5 falcon xmss ed25519 agent; do if test -e "${wdir}"/self/"${pub}".pub; then sha512sum < "${wdir}"/self/"${pub}".pub | awk '{print $1}'; fi; done) |
        /usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" seccure-sign -b -a -c secp521r1 -F "${wdir}"/self/secp.sec |
        /usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" seccure-sign -b -a -c brainpoolp512r1 -F "${wdir}"/self/brainpoolp.sec |
        tee -a "${wdir}"/self/chain.sig |
        /usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" /usr/bin/ssh-keygen -Y sign -f "${wdir}"/self/rsa.sec -n file.crypt.key.chain.rsa.top 2>/dev/null | tee -a "${wdir}"/self/chain2.sig |
        {
          EPHEMERAL="${SRANDOM}"-"${RANDOM}"-"$$"-"$PPID"
          cp -f -p "${wdir}"/self/ed25519.enc "${wdir}"/self/ed25519-"${EPHEMERAL}".sec.cpt || return $?
          /usr/bin/ssh-keygen -Y sign -f "${wdir}"/self/agent.sec -n file.crypt.key.chain.agent 2>/dev/null <"${wdir}"/self/agent.seed | sha512sum | awk '{print $1}' | /usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" ccrypt --decrypt --brave --force --keyfile - --prompt "" --prompt2 "" -- "${wdir}"/self/ed25519-"${EPHEMERAL}".sec.cpt || return $?
          /usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" /usr/bin/ssh-keygen -Y sign -f "${wdir}"/self/ed25519-"${EPHEMERAL}".sec -n file.crypt.key.chain.ed25519.top 2>/dev/null
          rm -f "${wdir}"/self/ed25519-"${EPHEMERAL}".sec
        } | tee -a "${wdir}"/self/chain3.sig |
        (/usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" /usr/local/bin/ssh-keygen -Y sign -f "${wdir}"/self/dilithium5.sec -n file.crypt.key.chain.dilithium5.top 2>/dev/null |tee -a "${wdir}"/self/chain4.sig || rm -f "${wdir}"/self/chain4.sig) |
        (/usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" /usr/local/bin/ssh-keygen -Y sign -f "${wdir}"/self/falcon.sec -n file.crypt.key.chain.falcon.top 2>/dev/null |tee -a "${wdir}"/self/chain5.sig || rm -f "${wdir}"/self/chain5.sig) |
        (/usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" /usr/bin/ssh-keygen -Y sign -f "${wdir}"/self/xmss.sec -n file.crypt.key.chain.xmss.top 2>/dev/null >> "${wdir}"/self/chain6.sig || rm -f "${wdir}"/self/chain6.sig) || {
          RET="$?"
          sys debug exit "${RET}" "Key creation failure"
        }

    SUM=$(cd "${wdir}"/self/. && optional=$(for i in chain4.sig chain5.sig chain6.sig dilithium5.pub falcon.pub xmss.pub; do if test -e "${i}"; then echo "${i}"; fi; done) && sha512sum -- genesis.stamp chain.sig chain2.sig chain3.sig brainpoolp.pub mceqcmdpc256fo.pub rsa.pub fmtseq.pub secp.pub ed25519.pub agent.pub ${optional} | sha512sum | awk '{print $1}' | head -c 128)

    if test -e "${wdir}"/self/footprint.sig
    then
      if ! test "$(cat "${wdir}"/self/footprint.sig | tr -d ' \t\n')" "==" "$(echo " " "${SUM}" | tr -d ' \t\n')"
      then
        sys debug exit 1 "Footprint for key differs"
      fi
    else
      echo " " "${SUM}" | tr -d ' \t\n' > "${wdir}"/self/footprint.sig
    fi
  )
  fi

  if ! sys crypt validate self
  then
    sys debug exit "$?" "Cannot validate key"
  fi

  first=0
  subkeys=("$@")
  potential=( $(cd "${wdir}"/self/./ && find . -maxdepth 1 -type d -print | fgrep / | sed 's,^\./,,' | tr '\n' ' ' | sed 's, *$,,') )
  rest="$(comm -23 <(echo "${potential[@]}" | tr ' ' '\n' |sort | uniq) <(echo "${subkeys[@]}" | tr ' ' '\n' |sort | uniq) | sed 's,^,<,' | sed 's,$,>,' | grep -v '^<>$' | tr '\n' ' '|sed 's, *$,,')"

  for subkey in "$@"
  do
    if echo X"${subkey}" | grep -q '^X\.$'
    then
      continue
    fi

    if test "${first}" -eq 0
    then
      echo -n "$(basename "$0"):" "Generating or validating subkeys:" 1>&2
      first=1
    fi

    if test "$(echo X"${subkey}" | sed 's,^X,,' | tr -d '\n' | wc -c)" -eq 0
    then
      sys debug exit 2 "Invalid null length subkey"
    fi

    if echo X"${subkey}" | grep -q "^X-" >/dev/null 2>/dev/null
    then
      sys debug exit 2 "Invalid subkey name: \"${subkey}\""
    fi

    if test "$(echo X"${subkey}" | tr -d A-Za-z0-9_@'\n\-' | wc -c)" -ne 0
    then
      sys debug exit 2 "Invalid subkey name: \"${subkey}\""
    fi

    mkdir -p "${wdir}"/self/"${subkey}" >/dev/null 2>/dev/null || true
    if ! test -d "${wdir}"/self/"${subkey}"/.
    then
      sys debug exit 1 "Could not resolve subkey path for \"${subkey}\""
    fi

    subexists=0
    if test -e "${wdir}"/self/"${subkey}"/brainpoolp.sec || test -e "${wdir}"/self/"${subkey}"/secp.sec || test -e "${wdir}"/self/"${subkey}"/rsa.sec || test -e "${wdir}"/self/"${subkey}"/mceqcmdpc256fo.sec || test -e "${wdir}"/self/"${subkey}"/ed25519.sec -o -e "${wdir}"/self/"${subkey}"/ed25519.enc
    then
      if test -e "${wdir}"/self/"${subkey}"/brainpoolp.sec && test -e "${wdir}"/self/"${subkey}"/secp.sec && test -e "${wdir}"/self/"${subkey}"/rsa.sec && test -e "${wdir}"/self/"${subkey}"/mceqcmdpc256fo.sec && test -e "${wdir}"/self/"${subkey}"/ed25519.sec -o -e "${wdir}"/self/"${subkey}"/ed25519.enc
      then
        subexists=1
      else
        sys debug exit 1 "Pre-existing private subkeys for \"${subkey}\" are not a complete set"
      fi
    fi

    if test -e "${wdir}"/self/"${subkey}"/brainpoolp.pub || test -e "${wdir}"/self/"${subkey}"/secp.pub || test -e "${wdir}"/self/"${subkey}"/rsa.pub || test -e "${wdir}"/self/"${subkey}"/mceqcmdpc256fo.pub || test -e "${wdir}"/self/"${subkey}"/ed25519.pub
    then
      if test -e "${wdir}"/self/"${subkey}"/brainpoolp.pub && test -e "${wdir}"/self/"${subkey}"/secp.pub && test -e "${wdir}"/self/"${subkey}"/rsa.pub && test -e "${wdir}"/self/"${subkey}"/mceqcmdpc256fo.pub && test -e "${wdir}"/self/"${subkey}"/ed25519.pub
      then
        subexists=1
      else
        sys debug exit 1 "Pre-existing public subkeys for \"${subkey}\" are not a complete set"
      fi
    fi

    if test "${subexists}" -eq 0
    then
    (
      umask 077
      export TMP="${wdir}"
      export TEMP="${TMP}"
      export TMPDIR="${TMP}"
      set -o pipefail
      GENESIS="$(sys date)"
      sys crypt generate seed > "${wdir}"/self/"${subkey}"/brainpoolp.sec || return $?
      /usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" /usr/bin/ssh-keygen -t rsa -b 8192 -N "" -C user -f "${wdir}"/self/"${subkey}"/rsa >/dev/null 2>/dev/null || return $?
      /usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" /usr/bin/ssh-keygen -t xmss -b 10 -N "" -C user -f "${wdir}"/self/"${subkey}"/xmss >/dev/null 2>/dev/null || true
      /usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" /usr/bin/ssh-keygen -t ed25519 -N "" -C user -f "${wdir}"/self/"${subkey}"/ed25519 >/dev/null 2>/dev/null || return $?
      mv "${wdir}"/self/"${subkey}"/ed25519 "${wdir}"/self/"${subkey}"/ed25519.sec || return $?
      /usr/bin/ssh-keygen -Y sign -f "${wdir}"/self/agent.sec -n file.crypt.key.chain.agent 2>/dev/null <"${wdir}"/self/agent.seed | sha512sum | awk '{print $1}' | /usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" ccrypt --encrypt --brave --force --keyfile - --prompt "" --prompt2 "" -- "${wdir}"/self/"${subkey}"/ed25519.sec || return $?
      mv -f "${wdir}"/self/"${subkey}"/ed25519.sec.cpt "${wdir}"/self/"${subkey}"/ed25519.enc || return $?
      rm -f "${wdir}"/self/"${subkey}"/ed25519.sec || return $?
      sys crypt generate seed > "${wdir}"/self/"${subkey}"/secp.sec || return $?
      /usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" /usr/local/bin/ssh-keygen -t dilithium5 -N "" -C user -f "${wdir}"/self/"${subkey}"/dilithium5 >/dev/null 2>/dev/null || rm -f "${wdir}"/self/"${subkey}"/dilithium5 "${wdir}"/self/"${subkey}"/dilithium5.pub >/dev/null 2>/dev/null
      /usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" /usr/local/bin/ssh-keygen -t falcon1024 -N "" -C user -f "${wdir}"/self/"${subkey}"/falcon >/dev/null 2>/dev/null || rm -f "${wdir}"/self/"${subkey}"/falcon "${wdir}"/self/"${subkey}"/falcon.pub >/dev/null 2>/dev/null
      mkdir -p "${wdir}"/self/"${subkey}"/ccr.d >/dev/null 2>/dev/null
      /usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" HOME="${wdir}"/self/"${subkey}"/ccr.d ccr -g FMTSEQ256C-SHA512-SHA256 -y --name self 2>/dev/null || return $?
      /usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" HOME="${wdir}"/self/"${subkey}"/ccr.d ccr -p -y -a -F self -N other > "${wdir}"/self/"${subkey}"/fmtseq.pub
      mv -f "${wdir}"/self/"${subkey}"/ccr.d/.ccr/secrets "${wdir}"/self/"${subkey}"/fmtseq.sec
      rm -r -f "${wdir}"/self/"${subkey}"/ccr.d/ || true

      mkdir -p "${wdir}"/self/"${subkey}"/.ccr >/dev/null 2>/dev/null || true
      /usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" HOME="${wdir}"/self/"${subkey}" ccr -g MCEQCMDPC256FO-SHA512-CHACHA20 -y --name self 2>/dev/null || return $?
      /usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" HOME="${wdir}"/self/"${subkey}" ccr -p -y -a -F self -N other |sed 's, publickeys [^-]*, publickeys canon,' > "${wdir}"/self/"${subkey}"/mceqcmdpc256fo.pub || return $?
      mv -f "${wdir}"/self/"${subkey}"/.ccr/secrets "${wdir}"/self/"${subkey}"/mceqcmdpc256fo.sec >/dev/null 2>/dev/null || return $?
      rm -f "${wdir}"/self/"${subkey}"/.ccr/secrets "${wdir}"/self/"${subkey}"/.ccr/pubkeys  "${wdir}"/self/"${subkey}"/.ccr/secrets\~ "${wdir}"/self/"${subkey}"/.ccr/pubkeys\~ "${wdir}"/self/"${subkey}"/.ccr/lock >/dev/null 2>/dev/null || true
      rmdir "${wdir}"/self/"${subkey}"/.ccr || return $?

      /usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" seccure-key -c brainpoolp512r1 -F "${wdir}"/self/"${subkey}"/brainpoolp.sec | sed "s,^The public key is: ,," > "${wdir}"/self/"${subkey}"/brainpoolp.pub || return $?
      /usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" seccure-key -c secp521r1 -F "${wdir}"/self/"${subkey}"/secp.sec | sed "s,^The public key is: ,," > "${wdir}"/self/"${subkey}"/secp.pub || return $?
      mv "${wdir}"/self/"${subkey}"/rsa "${wdir}"/self/"${subkey}"/rsa.sec || return $?
      mv "${wdir}"/self/"${subkey}"/dilithium5 "${wdir}"/self/"${subkey}"/dilithium5.sec >/dev/null 2>/dev/null || true
      mv "${wdir}"/self/"${subkey}"/falcon "${wdir}"/self/"${subkey}"/falcon.sec >/dev/null 2>/dev/null || true
      mv "${wdir}"/self/"${subkey}"/xmss "${wdir}"/self/"${subkey}"/xmss.sec >/dev/null 2>/dev/null || true

      echo "${GENESIS}" >> "${wdir}"/self/"${subkey}"/genesis.stamp
      unset GENESIS
      rm -f "${wdir}"/self/"${subkey}"/chain.sig "${wdir}"/self/"${subkey}"/chain2.sig "${wdir}"/self/"${subkey}"/chain3.sig "${wdir}"/self/"${subkey}"/chain4.sig "${wdir}"/self/"${subkey}"/master.sig "${wdir}"/self/"${subkey}"/master2.sig "${wdir}"/self/"${subkey}"/master3.sig "${wdir}"/self/"${subkey}"/master4.sig "${wdir}"/self/"${subkey}"/master5.sig "${wdir}"/self/"${subkey}"/master6.sig "${wdir}"/self/"${subkey}"/master7.sig >/dev/null 2>/dev/null || true
      (cat "${wdir}"/self/genesis.stamp "${wdir}"/self/"${subkey}"/genesis.stamp && for pub in brainpoolp mceqcmdpc256fo secp rsa fmtseq dilithium5 falcon xmss ed25519 agent; do if test -e "${wdir}"/self/"${subkey}"/"${pub}".pub; then sha512sum < "${wdir}"/self/"${subkey}"/"${pub}".pub | awk '{print $1}'; fi; if test -e "${wdir}"/self/"${pub}".pub; then sha512sum < "${wdir}"/self/"${pub}".pub | awk '{print $1}'; fi; done) |
        /usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" seccure-sign -b -a -c secp521r1 -F "${wdir}"/self/"${subkey}"/secp.sec |
        /usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" seccure-sign -b -a -c brainpoolp512r1 -F "${wdir}"/self/"${subkey}"/brainpoolp.sec |
        tee -a "${wdir}"/self/"${subkey}"/chain.sig |
        /usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" /usr/bin/ssh-keygen -Y sign -f "${wdir}"/self/"${subkey}"/rsa.sec -n file.crypt.key.chain.rsa.subkey.chain2 2>/dev/null | tee -a "${wdir}"/self/"${subkey}"/chain2.sig |
        {
          EPHEMERAL="${SRANDOM}"-"${RANDOM}"-"$$"-"$PPID"
          cp -f -p "${wdir}"/self/"${subkey}"/ed25519.enc "${wdir}"/self/"${subkey}"/ed25519-"${EPHEMERAL}".sec.cpt || return $?
          /usr/bin/ssh-keygen -Y sign -f "${wdir}"/self/agent.sec -n file.crypt.key.chain.agent 2>/dev/null <"${wdir}"/self/agent.seed | sha512sum | awk '{print $1}' | /usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" ccrypt --decrypt --brave --force --keyfile - --prompt "" --prompt2 "" -- "${wdir}"/self/"${subkey}"/ed25519-"${EPHEMERAL}".sec.cpt || return $?
          /usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" /usr/bin/ssh-keygen -Y sign -f "${wdir}"/self/"${subkey}"/ed25519-"${EPHEMERAL}".sec -n file.crypt.key.chain.ed25519.subkey.chain3 2>/dev/null
          rm -f "${wdir}"/self/"${subkey}"/ed25519-"${EPHEMERAL}".sec
        } | tee -a "${wdir}"/self/"${subkey}"/chain3.sig |
        (/usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" /usr/local/bin/ssh-keygen -Y sign -f "${wdir}"/self/"${subkey}"/dilithium5.sec -n file.crypt.key.chain.dilithium5.subkey.chain4 2>/dev/null | tee -a "${wdir}"/self/"${subkey}"/chain4.sig || rm -f "${wdir}"/self/"${subkey}"/chain4.sig) |
        (/usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" /usr/local/bin/ssh-keygen -Y sign -f "${wdir}"/self/"${subkey}"/falcon.sec -n file.crypt.key.chain.falcon.subkey.chain5 2>/dev/null | tee -a "${wdir}"/self/"${subkey}"/chain5.sig || rm -f "${wdir}"/self/"${subkey}"/chain5.sig) |
        (/usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" /usr/bin/ssh-keygen -Y sign -f "${wdir}"/self/"${subkey}"/xmss.sec -n file.crypt.key.chain.xmss.subkey.chain6 2>/dev/null >> "${wdir}"/self/"${subkey}"/chain6.sig || rm -f "${wdir}"/self/"${subkey}"/chain6.sig) || {
          RET="$?"
          sys debug exit "${RET}" "Key creation failure"
        }

      (cat "${wdir}"/self/genesis.stamp "${wdir}"/self/chain.sig "${wdir}"/self/"${subkey}"/chain.sig "${wdir}"/self/chain2.sig "${wdir}"/self/"${subkey}"/chain2.sig "${wdir}"/self/chain3.sig "${wdir}"/self/"${subkey}"/chain3.sig "${wdir}"/self/"${subkey}"/genesis.stamp && for i in "${wdir}"/self/chain4.sig "${wdir}"/self/"${subkey}"/chain4.sig "${wdir}"/self/chain5.sig "${wdir}"/self/"${subkey}"/chain5.sig "${wdir}"/self/chain6.sig "${wdir}"/self/"${subkey}"/chain6.sig; do if test -e "${i}"; then sha512sum < "$i" | awk '{print $1}'; fi; done && for pub in dilithium5 falcon xmss agent; do if test -e "${wdir}"/self/"${subkey}"/"${pub}".pub; then sha512sum < "${wdir}"/self/"${subkey}"/"${pub}".pub | awk '{print $1}'; fi; if test -e "${wdir}"/self/"${pub}".pub; then sha512sum < "${wdir}"/self/"${pub}".pub | awk '{print $1}'; fi; done && for pub in rsa fmtseq mceqcmdpc256fo secp brainpoolp ed25519; do sha512sum < "${wdir}"/self/"${subkey}"/"${pub}".pub | awk '{print $1}'; sha512sum < "${wdir}"/self/"${pub}".pub | awk '{print $1}'; done) |
        /usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" seccure-sign -b -a -c secp521r1 -F "${wdir}"/self/secp.sec |
        /usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" seccure-sign -b -a -c brainpoolp512r1 -F "${wdir}"/self/"${subkey}"/brainpoolp.sec |
        /usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" seccure-sign -b -a -c brainpoolp512r1 -F "${wdir}"/self/brainpoolp.sec |
        /usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" seccure-sign -b -a -c secp521r1 -F "${wdir}"/self/"${subkey}"/secp.sec |
        tee -a "${wdir}"/self/"${subkey}"/master.sig |
        /usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" /usr/bin/ssh-keygen -Y sign -f "${wdir}"/self/rsa.sec -n file.crypt.key.chain.rsa.subkey.master2 2>/dev/null | tee -a "${wdir}"/self/"${subkey}"/master2.sig |
        /usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" /usr/bin/ssh-keygen -Y sign -f "${wdir}"/self/"${subkey}"/rsa.sec -n file.crypt.key.chain.rsa.subkey.master3 2>/dev/null | tee -a "${wdir}"/self/"${subkey}"/master3.sig |
        {
          EPHEMERAL="${SRANDOM}"-"${RANDOM}"-"$$"-"$PPID"
          cp -f -p "${wdir}"/self/ed25519.enc "${wdir}"/self/ed25519-"${EPHEMERAL}".sec.cpt || return $?
          cp -f -p "${wdir}"/self/"${subkey}"/ed25519.enc "${wdir}"/self/"${subkey}"/ed25519-"${EPHEMERAL}".sec.cpt || return $?
          /usr/bin/ssh-keygen -Y sign -f "${wdir}"/self/agent.sec -n file.crypt.key.chain.agent 2>/dev/null <"${wdir}"/self/agent.seed | sha512sum | awk '{print $1}' | /usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" ccrypt --decrypt --brave --force --keyfile - --prompt "" --prompt2 "" -- "${wdir}"/self/ed25519-"${EPHEMERAL}".sec.cpt || return $?
          /usr/bin/ssh-keygen -Y sign -f "${wdir}"/self/agent.sec -n file.crypt.key.chain.agent 2>/dev/null <"${wdir}"/self/agent.seed | sha512sum | awk '{print $1}' | /usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" ccrypt --decrypt --brave --force --keyfile - --prompt "" --prompt2 "" -- "${wdir}"/self/"${subkey}"/ed25519-"${EPHEMERAL}".sec.cpt || return $?
          /usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" /usr/bin/ssh-keygen -Y sign -f "${wdir}"/self/ed25519-"${EPHEMERAL}".sec -n file.crypt.key.chain.ed25519.subkey.master4 2>/dev/null | tee -a "${wdir}"/self/"${subkey}"/master4.sig | /usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" /usr/bin/ssh-keygen -Y sign -f "${wdir}"/self/"${subkey}"/ed25519-"${EPHEMERAL}".sec -n file.crypt.key.chain.ed25519.subkey.master5 2>/dev/null
          rm -f "${wdir}"/self/ed25519-"${EPHEMERAL}".sec "${wdir}"/self/"${subkey}"/ed25519-"${EPHEMERAL}".sec
        } | tee -a "${wdir}"/self/"${subkey}"/master5.sig |
        (/usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" /usr/local/bin/ssh-keygen -Y sign -f "${wdir}"/self/dilithium5.sec -n file.crypt.key.chain.dilithium5.subkey.master6 2>/dev/null | tee -a "${wdir}"/self/"${subkey}"/master6.sig || rm -f "${wdir}"/self/"${subkey}"/master6.sig) |
        (/usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" /usr/local/bin/ssh-keygen -Y sign -f "${wdir}"/self/"${subkey}"/dilithium5.sec -n file.crypt.key.chain.dilithium5.subkey.master7 2>/dev/null | tee -a "${wdir}"/self/"${subkey}"/master7.sig || rm -f "${wdir}"/self/"${subkey}"/master7.sig) |
        (/usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" /usr/local/bin/ssh-keygen -Y sign -f "${wdir}"/self/falcon.sec -n file.crypt.key.chain.falcon.subkey.master8 2>/dev/null | tee -a "${wdir}"/self/"${subkey}"/master8.sig || rm -f "${wdir}"/self/"${subkey}"/master8.sig) |
        (/usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" /usr/local/bin/ssh-keygen -Y sign -f "${wdir}"/self/"${subkey}"/falcon.sec -n file.crypt.key.chain.falcon.subkey.master9 2>/dev/null | tee -a "${wdir}"/self/"${subkey}"/master9.sig || rm -f "${wdir}"/self/"${subkey}"/master9.sig) |
        (/usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" /usr/bin/ssh-keygen -Y sign -f "${wdir}"/self/xmss.sec -n file.crypt.key.chain.xmss.subkey.master10 2>/dev/null | tee -a "${wdir}"/self/"${subkey}"/master10.sig || rm -f "${wdir}"/self/"${subkey}"/master10.sig) |
        (/usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" /usr/bin/ssh-keygen -Y sign -f "${wdir}"/self/"${subkey}"/xmss.sec -n file.crypt.key.chain.xmss.subkey.master11 2>/dev/null >> "${wdir}"/self/"${subkey}"/master11.sig || rm -f "${wdir}"/self/"${subkey}"/master11.sig) || {
          RET="$?"
          sys debug exit "${RET}" "Key creation failure"
        }

      SUM=$(cd "${wdir}"/self/"${subkey}"/. && optional=$(for i in chain4.sig chain5.sig chain6.sig master6.sig master7.sig master8.sig master9.sig master10.sig master11.sig dilithium5.pub falcon.pub xmss.pub agent.pub; do if test -e "${i}"; then echo "${i}"; fi; done) && sha512sum -- genesis.stamp chain.sig chain2.sig chain3.sig brainpoolp.pub mceqcmdpc256fo.pub rsa.pub fmtseq.pub secp.pub ed25519.pub master.sig master2.sig master3.sig master4.sig master5.sig ${optional} | sha512sum | awk '{print $1}' | head -c 128)

      if test -e "${wdir}"/self/"${subkey}"/footprint.sig
      then
        if ! test "$(cat "${wdir}"/self/"${subkey}"/footprint.sig | tr -d ' \t\n')" "==" "$(echo " " "${SUM}" | tr -d ' \t\n')"
        then
          sys debug exit 1 "Footprint for key differs"
        fi
      else
        echo " " "${SUM}" | tr -d ' \t\n' > "${wdir}"/self/"${subkey}"/footprint.sig
      fi
    )
    fi

    if ! sys crypt validate self/"${subkey}"
    then
      sys debug exit "$?" "Cannot validate subkey self/${subkey}"
    fi

    if test "${subexists}" -eq 0
    then
      echo -n " ${subkey}" 1>&2
    else
      echo -n " [${subkey}]" 1>&2
    fi
  done

  if test "${first}" -ne 0
  then
    if test $(echo "${rest}" | tr -d ' \n\t<>' | wc -c) -eq 0
    then
      echo 1>&2
    else
      echo " | ${rest}" 1>&2
    fi
  else
    if test $(echo "${rest}" | tr -d ' \n\t<>' | wc -c) -ne 0
    then
      echo "$(basename "$0"):" "Available subkeys: ${rest}" 1>&2
    fi
  fi
}


sys_crypt_send() {
  wdir="$(sys crypt dir)"

  rec=0
  sender=""
  recipient=""
  spreamble=""
  rpreamble=""

  if test "$#" -gt 1
  then
    rec=1
  fi

  if test "$#" -eq 0
  then
    sender=.
    recipient=..
  else
    pair="$1"
    if echo X"${pair}" |fgrep -q : >/dev/null 2>/dev/null
    then
      if echo X"${pair}" | grep -q ':.*:' >/dev/null 2>/dev/null
      then
        sys debug exit 2 "Only one delimiter possible"
      fi

      if echo X"${pair}" | grep -q '^X-' >/dev/null 2>/dev/null
      then
        sys debug exit 2 "Invalid sender prefix"
      fi

      sender="$(echo "${pair}" | cut -f1 -d:)"
      recipient="$(echo "${pair}" | cut -f2 -d:)"

      if test X"$(echo -n "${sender}" | tr -d '\t\n ')" '==' X
      then
        sender=.
      fi

      if test X"$(echo -n "${recipient}" | tr -d '\t\n ')" '==' X
      then
        recipient=..
      fi
    else
      sender=.
      recipient="${pair}"
    fi

    unset pair
    shift
  fi

  if echo X"${sender}" |grep -q "^X\.\." >/dev/null 2>/dev/null
  then
    sys debug exit 2 "Invalid sender name: \"${sender}\""
  elif test "${sender}" '==' .
  then
    spreamble=self
  elif echo X"${sender}" |grep -q "^X\./" >/dev/null 2>/dev/null
  then
    if echo X"${sender}" | sed 's,^X\./,,' |grep -q '[/\.]' >/dev/null 2>/dev/null
    then
      sys debug exit 2 "Non-conforming sender name: \"${sender}\""
    fi

    spreamble="$(echo X"${sender}" |sed "s,^X\./,self/,")"
  elif echo X"${sender}" |grep -q "/" >/dev/null 2>/dev/null
  then
    sys debug exit 2 "Invalid sender name: \"${sender}\""
  else
    if test X"${sender}" == X
    then
      sys debug exit 2 "Invalid null sender length"
    fi

    if echo X"${sender}" |grep -q '\.' >/dev/null 2>/dev/null
    then
      sys debug exit 2 "Non-conforming sender name: \"${sender}\""
    fi

    spreamble=self/"${sender}"
  fi
  unset sender

  if test "${recipient}" '==' ..
  then
    rpreamble=upstream
  elif echo X"${recipient}" |grep -q "^X\.\./" >/dev/null 2>/dev/null
  then
    if echo X"${recipient}" | sed 's,^X\.\./,,' |grep -q '[/\.]' >/dev/null 2>/dev/null
    then
      sys debug exit 2 "Non-conforming recipient name: \"${recipient}\""
    fi
    rpreamble="$(echo X"${recipient}" |sed "s,^X\.\./,upstream/,")"
  elif test "${recipient}" '==' .
  then
    rpreamble=self
  elif echo X"${recipient}" |grep -q "^X\./" >/dev/null 2>/dev/null
  then
    if echo X"${recipient}" | sed 's,^X\./,,' |grep -q '[/\.]' >/dev/null 2>/dev/null
    then
      sys debug exit 2 "Non-conforming recipient name: \"${recipient}\""
    fi

    rpreamble="$(echo X"${recipient}" |sed "s,^X\./,self/,")"
  elif echo X"${recipient}" |grep -q "/" >/dev/null 2>/dev/null
  then
    if echo X"${recipient}" | sed 's,^X[^/]*/,,' |grep -q '[/\.]' >/dev/null 2>/dev/null
    then
      sys debug exit 2 "Non-conforming recipient name: \"${recipient}\""
    fi

    rpreamble=extern/"${recipient}"
  else
    if test X"${recipient}" == X
    then
      sys debug exit 2 "Invalid null recipient length"
    fi

    if echo X"${recipient}" |grep -q '\.' >/dev/null 2>/dev/null
    then
      sys debug exit 2 "Non-conforming recipient name: \"${recipient}\""
    fi
    rpreamble=extern/"${recipient}"
  fi
  unset recipient

  if test -e "${wdir}"/"${rpreamble}"/secp.pub && test -e "${wdir}"/"${rpreamble}"/brainpoolp.pub && test -e "${wdir}"/"${rpreamble}"/rsa.pub && test -e "${wdir}"/"${rpreamble}"/mceqcmdpc256fo.pub && test -e "${wdir}"/"${rpreamble}"/ed25519.pub
  then
    true
  else
    sys debug exit 2 "Public keys are not known to be available. May need to import"
  fi

  if test -e "${wdir}"/"${spreamble}"/secp.sec && test -e "${wdir}"/"${spreamble}"/brainpoolp.sec && test -e "${wdir}"/"${spreamble}"/rsa.sec && test -e "${wdir}"/"${spreamble}"/mceqcmdpc256fo.sec && test -e "${wdir}"/"${spreamble}"/ed25519.sec -o -e "${wdir}"/"${spreamble}"/ed25519.enc
  then
    true
  else
    sys debug exit 2 "Secret keys are not known to be available"
  fi

  (
    set -o pipefail
    umask 077

    if test -t 0
    then
      sys debug exit 2 "Not expecting tty input: \"${TTY}\""
    fi

    if test -t 1 || tty -s <&1
    then
      sys debug exit 2 "Refusing to output to a tty: \"${TTY}\""
    fi

    (
      TDIR="$(mktemp --directory "${wdir}"/tmp."${SRANDOM}"."${RANDOM}".XXXXXXXXXX)"
      export TMP="${TDIR}"
      export TEMP="${TMP}"
      export TMPDIR="${TMP}"

      mkdir -p "${TDIR}"/.ccr
      /usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" HOME="${TDIR}" ccr -y -i -a -N other < "${wdir}"/"${rpreamble}"/mceqcmdpc256fo.pub || return $?

      (sys date && cat) |
        /usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" age -r "$(cat "${wdir}"/"${rpreamble}"/rsa.pub)" |
        /usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" seccure-signcrypt -c secp521r1 -c brainpoolp512r1 -m 256 -F "${wdir}"/"${spreamble}"/secp.sec -- "$(cat "${wdir}"/"${rpreamble}"/brainpoolp.pub)" |
        /usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" age -r "$(cat "${wdir}"/"${rpreamble}"/ed25519.pub)" |
        /usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" HOME="${TDIR}" ccr -y -e -r other |
        /usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" seccure-signcrypt -c brainpoolp512r1 -c secp521r1 -m 256 -F "${wdir}"/"${spreamble}"/brainpoolp.sec -- "$(cat "${wdir}"/"${rpreamble}"/secp.pub)"

      RET="$?"
      if test "${RET}" -ne 0
      then
        sys debug exit "${RET}" "Send fails with exit status \"${RET}\""
      fi

      rm -f "${TDIR}"/.ccr/pubkeys "${TDIR}"/.ccr/secrets "${TDIR}"/.ccr/pubkeys\~ "${TDIR}"/.ccr/secrets\~ "${TDIR}"/.ccr/lock || true
      rmdir "${TDIR}"/.ccr || return $?
      rmdir "${TDIR}" || return $?

      unset TDIR
    ) |
    (
      if test "${rec}" -eq 0
      then
        cat
      else
        if ! sys crypt send "$@"
        then
          RET="$?"
          sys debug exit "${RET}" "Send chain fails with status ${RET} at: \"$@\""
        fi
      fi
    )
  )

  RET="$?"
  if test "${RET}" -ne 0
  then
    sys debug exit "${RET}" "Send fails with exit status \"${RET}\""
  fi
}

sys_crypt_receive() {
  wdir="$(sys crypt dir)"

  rec=0
  sender=""
  recipient=""
  spreamble=""
  rpreamble=""

  if test "$#" -gt 1
  then
    rec=1
  fi

  if test "$#" -eq 0
  then
    sender=.
    recipient=.
  else
    pair="$1"
    if echo X"${pair}" |fgrep -q : >/dev/null 2>/dev/null
    then
      if echo X"${pair}" | grep -q ':.*:' >/dev/null 2>/dev/null
      then
        sys debug exit 2 "Only one delimiter possible"
      fi

      if echo X"${pair}" | grep -q '^X-' >/dev/null 2>/dev/null
      then
        sys debug exit 2 "Invalid sender prefix"
      fi

      sender="$(echo "${pair}" | cut -f1 -d:)"
      recipient="$(echo "${pair}" | cut -f2 -d:)"

      if test X"$(echo -n "${sender}" | tr -d '\t\n ')" '==' X
      then
        sender=.
      fi

      if test X"$(echo -n "${recipient}" | tr -d '\t\n ')" '==' X
      then
        recipient=.
      fi
    else
      sender="${pair}"
      recipient=.
    fi

    unset pair
    shift
  fi

  if echo X"${recipient}" |grep -q "^X\.\." >/dev/null 2>/dev/null
  then
    sys debug exit 2 "Invalid recipient name: \"${recipient}\""
  elif test "${recipient}" '==' .
  then
    rpreamble=self
  elif echo X"${recipient}" |grep -q "^X\./" >/dev/null 2>/dev/null
  then
    if echo X"${recipient}" | sed 's,^X\./,,' |grep -q '[/\.]' >/dev/null 2>/dev/null
    then
      sys debug exit 2 "Non-conforming recipient name: \"${recipient}\""
    fi

    rpreamble="$(echo X"${recipient}" |sed "s,^X\./,self/,")"
  elif echo X"${recipient}" |grep -q "/" >/dev/null 2>/dev/null
  then
    sys debug exit 2 "Invalid recipient name: \"${recipient}\""
  else
    if test X"${recipient}" == X
    then
      sys debug exit 2 "Invalid null recipient length"
    fi

    if echo X"${recipient}" |grep -q '\.' >/dev/null 2>/dev/null
    then
      sys debug exit 2 "Non-conforming recipient name: \"${recipient}\""
    fi

    rpreamble=self/"${recipient}"
  fi
  unset recipient

  if test "${sender}" '==' ..
  then
    spreamble=upstream
  elif echo X"${sender}" |grep -q "^X\.\./" >/dev/null 2>/dev/null
  then
    if echo X"${sender}" | sed 's,^X\.\./,,' |grep -q '[/\.]' >/dev/null 2>/dev/null
    then
      sys debug exit 2 "Non-conforming sender name: \"${sender}\""
    fi
    spreamble="$(echo X"${sender}" |sed "s,^X\.\./,upstream/,")"
  elif test "${sender}" '==' .
  then
    spreamble=self
  elif echo X"${sender}" |grep -q "^X\./" >/dev/null 2>/dev/null
  then
    if echo X"${sender}" | sed 's,^X\./,,' |grep -q '[/\.]' >/dev/null 2>/dev/null
    then
      sys debug exit 2 "Non-conforming sender name: \"${sender}\""
    fi

    spreamble="$(echo X"${sender}" |sed "s,^X\./,self/,")"
  elif echo X"${sender}" |grep -q "/" >/dev/null 2>/dev/null
  then
    if echo X"${sender}" | sed 's,^X[^/]*/,,' |grep -q '[/\.]' >/dev/null 2>/dev/null
    then
      sys debug exit 2 "Non-conforming sender name: \"${sender}\""
    fi

    spreamble=extern/"${sender}"
  else
    if test X"${sender}" == X
    then
      sys debug exit 2 "Invalid null sender length"
    fi

    if echo X"${sender}" |grep -q '\.' >/dev/null 2>/dev/null
    then
      sys debug exit 2 "Non-conforming sender name: \"${sender}\""
    fi
    spreamble=extern/"${sender}"
  fi
  unset sender

  if test -e "${wdir}"/"${rpreamble}"/secp.sec && test -e "${wdir}"/"${rpreamble}"/brainpoolp.sec && test -e "${wdir}"/"${rpreamble}"/rsa.sec && test -e "${wdir}"/"${rpreamble}"/mceqcmdpc256fo.sec && test -e "${wdir}"/"${rpreamble}"/ed25519.sec -o -e "${wdir}"/"${rpreamble}"/ed25519.enc
  then
    true
  else
    sys debug exit 2 "Secret keys are not known to be available"
  fi

  if test -e "${wdir}"/"${spreamble}"/secp.pub && test -e "${wdir}"/"${spreamble}"/brainpoolp.pub && test -e "${wdir}"/"${spreamble}"/rsa.pub && test -e "${wdir}"/"${spreamble}"/mceqcmdpc256fo.pub && test -e "${wdir}"/"${spreamble}"/ed25519.pub
  then
    true
  else
    sys debug exit 2 "Public keys are not known to be available. May need to import"
  fi

  (
    set -o pipefail
    umask 077

    if test -t 0
    then
      sys debug exit 2 "Not expecting tty input: \"${TTY}\""
    fi

    if test -t 1 || tty -s <&1
    then
      sys debug exit 2 "Refusing to output to a tty: \"${TTY}\""
    fi

    (
      TDIR="$(mktemp --directory "${wdir}"/tmp."${SRANDOM}"."${RANDOM}".XXXXXXXXXX)"
      export TMP="${TDIR}"
      export TEMP="${TMP}"
      export TMPDIR="${TMP}"

      mkdir -p "${TDIR}"/.ccr
      echo -n "s11:CCR-PUBKEYSe" > "${TDIR}"/.ccr/pubkeys
      cp -p "${wdir}"/"${rpreamble}"/mceqcmdpc256fo.sec "${TDIR}"/.ccr/secrets

      /usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" seccure-veridec -c secp521r1 -c brainpoolp512r1 -F "${wdir}"/"${rpreamble}"/secp.sec -- "$(cat "${wdir}"/"${spreamble}"/brainpoolp.pub)" 2>/dev/null |
        /usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" HOME="${TDIR}" ccr -y -d -u self 2>/dev/null |
        {
          EPHEMERAL="${SRANDOM}"-"${RANDOM}"-"$$"-"$PPID"
          cp -f -p "${wdir}"/"${rpreamble}"/ed25519.enc "${wdir}"/"${rpreamble}"/ed25519-"${EPHEMERAL}".sec.cpt || return $?
          /usr/bin/ssh-keygen -Y sign -f "${wdir}"/self/agent.sec -n file.crypt.key.chain.agent 2>/dev/null <"${wdir}"/self/agent.seed | sha512sum | awk '{print $1}' | ccrypt --decrypt --brave --force --keyfile - --prompt "" --prompt2 "" -- "${wdir}"/"${rpreamble}"/ed25519-"${EPHEMERAL}".sec.cpt || return $?
          /usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" age -d -i "${wdir}"/"${rpreamble}"/ed25519-"${EPHEMERAL}".sec 2>/dev/null
          rm -f "${wdir}"/"${rpreamble}"/ed25519-"${EPHEMERAL}".sec
        } |
        /usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" seccure-veridec -c brainpoolp512r1 -c secp521r1 -F "${wdir}"/"${rpreamble}"/brainpoolp.sec -- "$(cat "${wdir}"/"${spreamble}"/secp.pub)" 2>/dev/null |
        /usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" age -d -i "${wdir}"/"${rpreamble}"/rsa.sec 2>/dev/null |
        (dd bs=30 count=1 status=none | cat -v | sed -e 's,^,Timestamp: ,' 1>&2 && cat)

      RET="$?"

      rm -f "${TDIR}"/.ccr/pubkeys "${TDIR}"/.ccr/secrets "${TDIR}"/.ccr/pubkeys\~ "${TDIR}"/.ccr/secrets\~ "${TDIR}"/.ccr/lock || true
      rmdir "${TDIR}"/.ccr || return $?
      rmdir "${TDIR}" || return $?

      unset TDIR

      if test "${RET}" -ne 0
      then
        sys debug exit "${RET}" "Receive fails with exit status \"${RET}\""
      fi
    ) |
    (
      if test "${rec}" -eq 0
      then
        cat
      else
        if ! sys crypt receive "$@"
        then
          RET="$?"
          sys debug exit "${RET}" "Receive chain fails at: \"$@\""
        fi
      fi
    )
  )

  RET="$?"
  if test "${RET}" -ne 0
  then
    sys debug exit "${RET}" "Receive fails with exit status \"${RET}\""
  fi
}

sys_crypt_sign() {
  wdir="$(sys crypt dir)"

  rec=0
  sender=""
  spreamble=""

  if test "$#" -gt 1
  then
    rec=1
  fi

  if test "$#" -eq 0
  then
    sender=.
  else
    sender="$1"
    shift
  fi

  if echo X"${sender}" |grep -q "^X\.\." >/dev/null 2>/dev/null
  then
    sys debug exit 2 "Invalid signer name: \"${sender}\""
  elif test "${sender}" '==' .
  then
    spreamble=self
  elif echo X"${sender}" |grep -q "^X\./" >/dev/null 2>/dev/null
  then
    if echo X"${sender}" | sed 's,^X\./,,' |grep -q '[/\.]' >/dev/null 2>/dev/null
    then
      sys debug exit 2 "Non-conforming signer name: \"${sender}\""
    fi

    spreamble="$(echo X"${sender}" |sed "s,^X\./,self/,")"
  elif echo X"${sender}" |grep -q "/" >/dev/null 2>/dev/null
  then
    sys debug exit 2 "Invalid signer name: \"${sender}\""
  else
    if test X"${sender}" == X
    then
      sys debug exit 2 "Invalid null signer length"
    fi

    if echo X"${sender}" |grep -q '\.' >/dev/null 2>/dev/null
    then
      sys debug exit 2 "Non-conforming signer name: \"${sender}\""
    fi

    spreamble=self/"${sender}"
  fi
  unset sender

  if test -e "${wdir}"/"${spreamble}"/secp.sec && test -e "${wdir}"/"${spreamble}"/brainpoolp.sec && test -e "${wdir}"/"${spreamble}"/rsa.sec && test -e "${wdir}"/"${spreamble}"/mceqcmdpc256fo.sec && test -e "${wdir}"/"${spreamble}"/ed25519.sec -o -e "${wdir}"/"${spreamble}"/ed25519.enc
  then
    true
  else
    sys debug exit 2 "Secret keys are not known to be available"
  fi

  (
    set -o pipefail
    umask 077

    (
      export TMP="${wdir}"
      TDIR="$(mktemp --directory "${wdir}"/tmp."${SRANDOM}"."${RANDOM}".XXXXXXXXXX)"
      export TEMP="${TMP}"
      export TMPDIR="${TMP}"
      timestamp="$(sys date)"

      ( tee -a >( sha512sum -b | awk '{print $1}' > "${TDIR}"/sha2 ) ) |
      ( tee -a >(wc -c > "${TDIR}"/size) && echo && echo -n "Size: " && (cat "${TDIR}"/size | xargs -n 1 printf %012d && echo) && echo -n "SHA2-512: " && cat "${TDIR}"/sha2 && echo "Timestamp: ${timestamp}" && echo "Signer:" "$(cat "${wdir}"/"${spreamble}"/genesis.stamp)" "$(cat "${wdir}"/"${spreamble}"/footprint.sig)" ) |
      ( tee -a >( b2sum -b -l512 | awk '{print $1}' > "${TDIR}"/b2sum ) && echo -n "Cascade/Blake2: " && cat "${TDIR}"/b2sum ) |
      ( tee -a >( b3sum -l256 --num-threads 1 --no-mmap --no-names > "${TDIR}"/b3sum ) && echo -n "Cascade/Blake3-XOF: " && cat "${TDIR}"/b3sum ) |
      ( tee -a >( edonr512-hash --base64 - |awk '{print $1}' > "${TDIR}"/edonr ) && echo -n "Cascade/Edon-R: " && cat "${TDIR}"/edonr ) |
      ( tee -a >( gost12-512-hash --base32 - |awk '{print $1}' > "${TDIR}"/gost ) && echo -n "Cascade/GOST: " && cat "${TDIR}"/gost ) |
      ( tee -a >( nettle-hash --algorithm=sha3_512 -l64 | sed 's,  *sha3_512,,' > "${TDIR}"/sha3 ) && echo -n "Cascade/SHA3-512: " && cat "${TDIR}"/sha3 ) |
      ( tee -a >( whirlpool-hash --base64 - |awk '{print $1}' > "${TDIR}"/whirlpool ) && echo -n "Cascade/Whirlpool: " && cat "${TDIR}"/whirlpool ) |
      tee -a >(
        /usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" seccure-sign -b -a -c secp521r1 -F "${wdir}"/"${spreamble}"/secp.sec |
        /usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" seccure-sign -b -a -c brainpoolp512r1 -F "${wdir}"/"${spreamble}"/brainpoolp.sec |
        /usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" seccure-sign -b -a -c secp521r1 -F "${wdir}"/"${spreamble}"/secp.sec |
        \
        tee -a \
          >(/usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" /usr/bin/ssh-keygen -Y sign -f "${wdir}"/"${spreamble}"/rsa.sec -n file.crypt.key.chain.rsa.sign 2>/dev/null > "${TDIR}"/rsa.sig) \
          >(
            EPHEMERAL="${SRANDOM}"-"${RANDOM}"-"$$"-"$PPID"
            cp -f -p "${wdir}"/"${spreamble}"/ed25519.enc "${wdir}"/"${spreamble}"/ed25519-"${EPHEMERAL}".sec.cpt || exit $?

            if ! /usr/bin/ssh-keygen -Y sign -f "${wdir}"/self/agent.sec -n file.crypt.key.chain.agent 2>/dev/null <"${wdir}"/self/agent.seed | sha512sum | awk '{print $1}' | /usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" ccrypt --decrypt --brave --force --keyfile - --prompt "" --prompt2 "" -- "${wdir}"/"${spreamble}"/ed25519-"${EPHEMERAL}".sec.cpt
            then 
              RET=$?
              rm -f "${wdir}"/"${spreamble}"/ed25519-"${EPHEMERAL}".sec
              exit "${RET}"
            fi

            if ! /usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" /usr/bin/ssh-keygen -Y sign -f "${wdir}"/"${spreamble}"/ed25519-"${EPHEMERAL}".sec -n file.crypt.key.chain.ed25519.subkey.sign 2>/dev/null > "${TDIR}"/ed25519.sig
            then
              RET=$?
              rm -f "${wdir}"/"${spreamble}"/ed25519-"${EPHEMERAL}".sec
              exit "${RET}"
            fi

            rm -f "${wdir}"/"${spreamble}"/ed25519-"${EPHEMERAL}".sec
          ) \
          >(/usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" /usr/local/bin/ssh-keygen -Y sign -f "${wdir}"/"${spreamble}"/dilithium5.sec -n file.crypt.key.chain.dilithium5.sign 2>/dev/null > "${TDIR}"/dilithium5.sig || : > "${TDIR}"/dilithium5.sig) \
          >(/usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" /usr/bin/ssh-keygen -Y sign -f "${wdir}"/"${spreamble}"/xmss.sec -n file.crypt.key.chain.xmss.sign 2>/dev/null > "${TDIR}"/xmss.sig || : > "${TDIR}"/xmss.sig) \
          >(/usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" /usr/local/bin/ssh-keygen -Y sign -f "${wdir}"/"${spreamble}"/falcon.sec -n file.crypt.key.chain.falcon.sign 2>/dev/null > "${TDIR}"/falcon.sig || : > "${TDIR}"/falcon.sig) >/dev/null \
      ) | cat

      cat "${TDIR}"/sha2 "${TDIR}"/size "${TDIR}"/b2sum "${TDIR}"/b3sum "${TDIR}"/edonr "${TDIR}"/gost "${TDIR}"/sha3 "${TDIR}"/whirlpool "${TDIR}"/ed25519.sig "${TDIR}"/dilithium5.sig "${TDIR}"/rsa.sig "${TDIR}"/xmss.sig "${TDIR}"/falcon.sig | (
        EPHEMERAL="${SRANDOM}"-"${RANDOM}"-"$$"-"$PPID"
        mkdir -p "${wdir}"/"${spreamble}"/ccr-"${EPHEMERAL}".d/.ccr >/dev/null 2>/dev/null || true
        echo -n "s11:CCR-PUBKEYSe" > "${wdir}"/"${spreamble}"/ccr-"${EPHEMERAL}".d/.ccr/pubkeys
        mv -f "${wdir}"/"${spreamble}"/fmtseq.sec "${wdir}"/"${spreamble}"/ccr-"${EPHEMERAL}".d/.ccr/secrets &&
          /usr/bin/env -i TMP="${TMP}" TMPDIR="${TMPDIR}" TEMP="${TEMP}" HOME="${wdir}"/"${spreamble}"/ccr-"${EPHEMERAL}".d ccr -s -y -u self -a -b - > "${TDIR}"/fmtseq.sig 2>/dev/null &&
          mv -f "${wdir}"/"${spreamble}"/ccr-"${EPHEMERAL}".d/.ccr/secrets "${wdir}"/"${spreamble}"/fmtseq.sec &&
          rm -r "${wdir}"/"${spreamble}"/ccr-"${EPHEMERAL}".d)

      RET="$?"
      if test "${RET}" -ne 0
      then
        sys debug exit "${RET}" "Sign fails with exit status \"${RET}\""
      fi

      if ! cat -- "${TDIR}"/ed25519.sig "${TDIR}"/rsa.sig "${TDIR}"/xmss.sig "${TDIR}"/falcon.sig "${TDIR}"/dilithium5.sig "${TDIR}"/fmtseq.sig
      then
        sys debug exit "${RET}" "Sign fails with exit status \"$?\""
      fi

      echo Signature size: "$(wc -c <(echo "/Size: 000000000000/SHA2-512: Timestamp: ${timestamp}/Signer: /Cascade/Blake2: Cascade/Blake3-XOF: Cascade/Edon-R: Cascade/GOST: Cascade/SHA3-512: Cascade/Whirlpool: Signature size: 00000000") "${TDIR}"/sha2 "${wdir}"/"${spreamble}"/genesis.stamp "${wdir}"/"${spreamble}"/footprint.sig "${TDIR}"/b2sum "${TDIR}"/b3sum "${TDIR}"/edonr "${TDIR}"/gost "${TDIR}"/sha3 "${TDIR}"/whirlpool "${TDIR}"/ed25519.sig "${TDIR}"/rsa.sig "${TDIR}"/xmss.sig "${TDIR}"/falcon.sig "${TDIR}"/dilithium5.sig "${TDIR}"/fmtseq.sig | tail -n 1 |awk '{print $1}' | tr -cd 0-9 | xargs -n 1 printf %08d)"
      rm -r "${TDIR}" || true
    ) |
    (
      if test "${rec}" -eq 0
      then
        cat
      else
        if ! sys crypt sign "$@"
        then
          RET="$?"
          sys debug exit "${RET}" "Sign chain fails with status ${RET} at: \"$@\""
        fi
      fi
    )
  )

  RET="$?"
  if test "${RET}" -ne 0
  then
    sys debug exit "${RET}" "Sign fails with exit status \"${RET}\""
  fi
}


sys_crypt_export() {
  wdir="$(sys crypt dir)"

  if ! sys crypt key "$@"
  then
    RET="$?"
    sys debug exit "${RET}" "Unable to generate or validate \"$@\": status ${RET}"
  fi

  if test "$(echo " " "$@" | tr ' \t' '\n\n'| grep . | tr -d '\n' | wc -c)" -eq 0
  then
    sys crypt validate self/ || sys debug exit "$?" "Cannot validate"
  fi

  TIMESTAMP="$(cat -- "${wdir}"/self/genesis.stamp)"
  addendum=
  if test "$#" -ne 0
  then
    addendum=-"$(echo " " "$@" | tr ' ' '\n'|sort|uniq|grep .|grep -v '^\.$' |tr '\n' , | sed 's/,$//')"
    if test X"${addendum}" '==' X-
    then
      if echo " " "$@" |tr ' ' '\n' |grep -q '^\.$'
      then
        addendum=-Shallow
      else
        addendum=
      fi
    fi
  fi

  if test "$#" -eq 0
  then
    rec=2
  else
    rec=1
  fi

  for i in "$@"
  do
    if echo -- "${i}" |fgrep -q / >/dev/null
    then
      sys debug exit 2 "Invalid subkey \"${i}\""
    fi

    if echo X"${i}" |grep -q '^X\.\.' >/dev/null
    then
      sys debug exit 2 "Invalid subkey \"${i}\""
    fi

    if ! test -d "${wdir}"/self/"${i}"/.
    then
      sys debug exit 2 "Subkey \"${i}\" not known to exist"
    fi
  done

  (
    set -o pipefail

    (
      cd "${wdir}"/self/. || return $?
      (rm -f ./upstream.d >/dev/null 2>/dev/null || true) || true
      (ln -s -f ../upstream/./ ./upstream.d >/dev/null 2>/dev/null || true) || true

      find . ./upstream.d/. "$@" -maxdepth "${rec}" -type f \( -name \*.sig -or -name \*.pub -or -name \*.stamp \) -print0 |
        sort -z |
        uniq -z |
        cpio -0 -H newc -o --renumber-inodes --quiet |
        gzip -9 -q -f |
        uuencode "${TIMESTAMP}${addendum}"-Key-Export.cpio.gz
    ) | if test -t 1 || tty -s <&1
      then
        if test -e "${TIMESTAMP}${addendum}"-Keys.cpio.gz.uuencode
        then
          mv -f "${TIMESTAMP}${addendum}"-Keys.cpio.gz.uuencode "${TIMESTAMP}${addendum}"-Keys.cpio.gz.uuencode-"${SRANDOM}"-"${RANDOM}"-Backup >/dev/null 2>/dev/null
        fi

        cat >> "${TIMESTAMP}${addendum}"-Keys.cpio.gz.uuencode

        if test -s "${TIMESTAMP}${addendum}"-Keys.cpio.gz.uuencode
        then
          echo "${TIMESTAMP}${addendum}"-Keys.cpio.gz.uuencode 1>&2
        else
          rm -f "${TIMESTAMP}${addendum}"-Keys.cpio.gz.uuencode >/dev/null 2>/dev/null || true
        fi
      else
        cat
      fi
  )
}

sys_debug() {
  true
}

sys_debug_trace() {
  echo "$(basename "$0"):${LINENO}:${BASH_LINENO[@]}" '['"${PIPESTATUS[@]}" "${BASH_SUBSHELL}"']': "$@" 1>&2
}

sys_debug_exit() {
  RET="$1"
  shift
  printf -v joined "%s/" "${FUNCNAME[@]}"
  echo "${joined}" "${LINENO}:${BASH_LINENO[@]}" '['"${PIPESTATUS[@]}" "${BASH_SUBSHELL}"']' 1>&2
  echo 1>&2
  echo "$(basename "$0") [Exit status ${RET}]:" "$@" 1>&2
  exit "${RET}"
}

sys_crypt_import() {
  wdir="$(sys crypt dir)"

  if test "$#" -eq 0
  then
    (
      export max=24
      cd "${wdir}"/. || return $?

      export width="$(find . -type f -name genesis.stamp -exec sh -c 'expr $(echo {} | wc -c) - 15' \; | sort -n | tail -n 1)"

      printf "%-${width}s %-30s%-20s %s\n" "Key" "Genesis" "Checksum" "Ref" 1>&2
      printf "%-${width}s %-30s%-20s %s\n" "---" "-------" "--------" "---" 1>&2
      sync

      refs=""
      find . -type f -name genesis.stamp -exec grep . -- \{\} /dev/null \; | sed 's,^\./,,' | sed 's,/genesis.stamp:, ,' | sed 's,^self,_self,' | sort | sed 's,^_self,self,'| while read entry
      do
        set -- ${entry}
        post="$(echo "$1" | sed 's,^extern/,,' | sed 's,^upstream/,,')"
        if echo "${post}" | grep -q /
        then
          SUM=$(cd "${wdir}"/"$1" && optional=$(for i in chain4.sig chain5.sig chain6.sig master6.sig master7.sig master8.sig master9.sig master10.sig master11.sig dilithium5.pub falcon.pub xmss.pub agent.pub; do if test -e "${i}"; then echo "${i}"; fi; done) && sha512sum -- genesis.stamp chain.sig chain2.sig chain3.sig brainpoolp.pub mceqcmdpc256fo.pub rsa.pub fmtseq.pub secp.pub ed25519.pub master.sig master2.sig master3.sig master4.sig master5.sig ${optional} | sha512sum | awk '{print $1}' | head -c 18)
        else
          SUM=$(cd "${wdir}"/"$1" && optional=$(for i in chain4.sig chain5.sig chain6.sig dilithium5.pub falcon.pub xmss.pub; do if test -e "${i}"; then echo "${i}"; fi; done) && sha512sum -- genesis.stamp chain.sig chain2.sig chain3.sig brainpoolp.pub mceqcmdpc256fo.pub rsa.pub fmtseq.pub secp.pub ed25519.pub agent.pub ${optional} | sha512sum | awk '{print $1}' | head -c 18)
        fi

        if echo "${refs}" | fgrep -q "${SUM}"
        then
          ref="$(expr $(echo "${refs}" | tr ' ' '\n' |grep -n "${SUM}" | cut -f1 -d:) - 1)"
        else
          ref="$(expr $(echo ${refs} | tr ' ' '\n'|sort|uniq | wc -w) + 1)"
          refs="${refs} ${SUM}"
        fi

        printf "%-${width}s %s %s %s\n" ${entry} "${SUM}".. "${ref}"
      done
    )

    return 0
  fi

  dest="$1"

  if test $(echo X"${dest}" |head -n 1 |sed 's,^X,,' | tr -d ' \n' | wc -c) -eq 0
  then
    sys debug exit 2 "Invalid import destination \"${dest}\""
  fi

  if test $(echo X"${dest}" |head -n 1 |sed 's,^X,,'| tr -d '\n' | tr -d A-Za-z0-9_@'\-' | wc -c) -ne 0
  then
    sys debug exit 2 "Invalid import destination \"${dest}\""
  fi

  if test -d "${wdir}"/extern/"${dest}"/.
  then
    sys debug trace "Warning: destination \"${dest}\" already exists"
  fi
  mkdir -p -- "${wdir}"/extern/"${dest}" >/dev/null 2>/dev/null || true

  (
    cd "${wdir}"/extern/"${dest}"/. || return $?
    umask 027
    uudecode -o- | gunzip -q -f | cpio -i -m -d --force-local --no-absolute-filenames --sparse
  ) || sys debug exit "$?" "Could not import"

  sys crypt validate extern/"${dest}" || sys debug exit "$?" "Validation fails for: extern/${dest}"
}

function sys_storage_block_disk_recency() {
  name="$1"
  shift
  local times=()

  for part in $(sys storage block part match "${name}")
  do
    dir=/mnt/"${name}"-"${RANDOM}"-"${SRANDOM}"-"${PPID}"-"$$"
    mkdir "${dir}" || return $?
    if echo "${name}" |grep -qi "^EFI"
    then
      mount -v -t vfat -o ro "${part}" "${dir}" 1>&2 || return $?
    else
      mount -v -t ext4 -o debug,ro "${part}" "${dir}" 1>&2 || return $?
    fi
    if test $(cd "${dir}"/ && find . -type f -print |wc -l) -eq 0
    then
      times+=(0:"${part}")
    else
      times+=($(cd "${dir}"/ && find . -type f -exec stat -c "%Y %n" -- \{\} \; | sort -n | tail -n 1 | awk '{print $1}'):"${part}")
    fi
    umount -v "${dir}" 1>&2 || return $?
    rmdir "${dir}" || return $?
  done

  echo "$(basename "$0")": Timestamps for name ${name}: ${times[@]} 1>&2
  echo ${times[@]} | tr ' ' '\n'| sort -nr | cut -f2 -d:
}

function sys_storage_block_disk_sync() {
  local ordered=()

  for name in EFI CACHE CONF IDEN
  do
    ordered=($(sys storage block disk recency "${name}"))
    reversed=($(sys storage block disk recency "${name}" | tr ' ' '\n'|tac | tr '\n' ' '))
    sys debug trace "Sync name ${name} using ordered chain: ${ordered[@]}"

    for direction in fwd rev
    do

      while test ${#ordered[@]} -ge 2
      do
        origin="${ordered[0]}"
        odir=/mnt/"${name}"-"$(echo $name $origin |sha512sum |awk '{print $1}' | head -c 12)"
        mkdir "${odir}"
        if echo "${name}" |grep -iq "^EFI"
        then
          mount -v -t vfat -o ro "${origin}" "${odir}" 1>&2 || return $?
        else
          mount -v -t ext4 -o ro,debug "${origin}" "${odir}" 1>&2 || return $?
        fi

        for rest in "${ordered[@]:1}"
        do
          rdir=/mnt/"${name}"-"$(echo $name $rest |sha512sum |awk '{print $1}' | head -c 12)"
          mkdir "${rdir}"
          if echo "${name}" |grep -iq "^EFI"
          then
            mount -v -t vfat "${rest}" "${rdir}" 1>&2 || return $?
          else
            mount -v -t ext4 -o debug "${rest}" "${rdir}" 1>&2 || return $?
          fi

          if echo "${name}" | grep -qi "^IDEN"
          then
            tar -C "${odir}"/ -c -f - . |tar -C "${rdir}"/ -x -p -k -f - || true
          else
            rsync --archive --exclude='ldlinux.*' --verbose --inplace --update --whole-file --one-file-system --numeric-ids --stats --itemize-changes "${odir}"/ "${rdir}"/ || sys debug trace "Warning: rsync status $? for origin \"${origin}\" destination \"${rest}\""
          fi

          umount -v "${rdir}" 1>&2
          rmdir "${rdir}"
        done

        umount -v "${odir}" 1>&2
        rmdir "${odir}"

        ordered=("${ordered[@]:1}")
      done

    ordered=(${reversed[@]})
    done
  done

  sync
}

function sys_directive_install() {
  if test $(sys storage block part match ZFS 2>/dev/null | tr ' ' '\n'|grep . |sort |uniq|wc -l) -ne 0
  then
    MAIN=ZFS
  else
    MAIN=DATA
  fi

  sys debug trace "Considering candidates for installation"
  disks="$(sys storage block disk match)"
  if test $(echo ${disks} | tr -d '\n \t' |wc -c) -ne 0
  then
    sys debug trace "Candidate list: ${disks}"
  fi

  for disk in ${disks}
  do
    sys debug trace "Partition disk ${disk} - ${MAIN}"
    sys storage block disk partition "${disk}" ${MAIN} || return $?
    sys storage block disk syslinux "${disk}" || return $?
  done

  sys debug trace "Synchronise state"
  sys storage block disk sync
  sys debug trace "Synchronise state complete"
}

function sys_directive() {
  true
}

function sys_directive_complete() {
  cd /

  sync
  echo System shutting down now. Interrupt to abort 1>&2
  stty intr '^C' quit '^\' || true
  sleep 5
  echo System shutting down now. Interrupt to abort |wall || true
  sleep 5
  for i in /mnt/*; do mount -o remount,ro "$i" >/dev/null 2>/dev/null || true; sync; done
  for i in /mnt/*; do umount -v "$i" >/dev/null 2>/dev/null || true; sync; done
  for i in /mnt/*; do umount -l -v "$i" >/dev/null 2>/dev/null || true; sync; done
  mount -o remount,ro / >/dev/null 2>/dev/null || true
  ((sleep 96 && shutdown -h now) &)

  for i in s s u s o o; do echo $i > /proc/sysrq-trigger; sleep 3; sync; done

  exec halt
}

function sys_platform_bootstrap_packages() {
  echo age amd64-microcode brotli bzip2 ca-certificates ccrypt codecrypt coreutils cpio curl dc dosfstools dpkg e2fsprogs efibootmgr findutils gawk gdisk gnupg1 gostsum gzip hashdeep hostname initramfs-tools-core intel-microcode iproute2 jq kmod lsb-release lshw lsof lsscsi lz4 lzip lzop moreutils mount net-tools nettle-bin pciutils procinfo procps qemu-system-x86 qemu-user-static qemu-utils rhash rsync seccure sed sharutils sq syslinux syslinux-common syslinux-efi syslinux-utils sysstat tar usbutils util-linux wget xxhash xz-utils zstd
}

function sys_platform() {
  true
}

function sys_platform_bootstrap() {
  true
}

function sys_platform_bootstrap_depend() {
  apt-get -y update || return $?
  apt-get -y install --verbose-versions $(sys platform bootstrap packages) || return $?
}

function sys_platform_bootstrap_validate() {
  if dpkg -s $(sys platform bootstrap packages) >/dev/null 2>/dev/null
  then
    sys debug trace "Conforming platform"
    return 0
  else
    RET=$?
    sys debug exit "${RET}" "Platform may be missing packages. Suggest running: sys platform bootstrap depend"
  fi
}

function sys_storage_zfs_pool_create() {
  return 0
}

function sys_storage_zfs_pool_destroy() {
  return 0
}

function sys_network_configure() {
  return 0
}

function sys_network_status() {
  return 0
}

function sys_storage_zfs() {
  local cmd="$1"
  case "$cmd" in
    help)
      echo "example additional help" 1>&2
      ;;
    completion)
      echo ""
      ;;
    *)
      true
      ;;
  esac
}

function sys_storage_zfs_pool() {
  local cmd="$1"
  case "$cmd" in
    completion)
      echo ""
      ;;
    *)
      true
      ;;
  esac
}

function sys_storage() {
  local cmd="$1"
  case "$cmd" in
    completion)
      echo ""
      ;;
    *)
      true
      ;;
  esac
}

function sys_network() {
  local cmd="$1"
  case "$cmd" in
    completion)
      echo ""
      ;;
    *)
      true
      ;;
  esac
}

if test "${#@}" -eq 0
then
  sys help
else
  sys "$@"
fi
